{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c7e4b7db",
   "metadata": {},
   "source": [
    "# BROMIDES IN COPPERMAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ee6ff667",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import pandas as pd\n",
    "\n",
    "# # Define the data\n",
    "# data = {\n",
    "#     \"id_lucas\": [\n",
    "#         \"alle_151\", \"alle_1000\", \"alle_41\", \"alle_20\", \"alle_178\", \"alle_27\", \"alle_7\", \"alle_13\", \"alle_190\", \"alle_117\", \"alle_116\", \"alle_140\", \"alle_169\", \"alle_153\", \"alle_144\", \"alle_123\", \"alle_114\", \"alle_170\", \"alle_184\", \"alle_188\", \"alle_195\", \"alle_148\", \"alle_97\", \"alle_400\", \"alle_167\", \"alle_56\", \"alle_196\", \"alle_2003\", \"alle_2005\", \"alle_2006\", \"alle_2008\", \"alle_2011\", \"alle_2012\"\n",
    "#     ],\n",
    "#     \"smiles\": [\n",
    "#         \"COc1cccc(Br)n1\", \"BrC1=CSC=N1\", \"Brc1cccc2ccccc12\", \"N#Cc1ccc(Br)cc1\", \"Cc1ccccc1Br\", \"Brc1ccccn1\", \"Fc1ccc(Br)cc1\", \"COc1cccc(Br)c1\", \"Fc1ccc(F)c(Br)c1\", \"Brc1cccc2cccnc12\", \"COc1ccc(Br)cc1F\", \"Fc1cccc(Br)c1\", \"Brc1cccc(Oc2ccccc2)c1\", \"CCc1ccc(Br)cc1\", \"Fc1cccc(Br)n1\", \"COc1ccc(Br)cc1OC\", \"Brc1cccc2ncccc12\", \"Cc1cc(F)ccc1Br\", \"Cc1ccc2ccccc2c1Br\", \"CCc1ccccc1Br\", \"Cc1ccc(C)c(Br)c1\", \"Fc1ccccc1Br\", \"COc1ccccc1Br\", \"COc1ccc(Br)c(C)c1\", \"Brc1cccc2cnccc12\", \"Cc1cccc(C)c1Br\", \"Cc1ccc(F)cc1Br\", \"FC1=C(C#N)C=CC(Br)=C1\", \"BrC1=CC=C(C(C2=CC=CC=C2)=O)C=C1\", \"CC(C)(C1=CC(C(C)(C)C)=CC(Br)=C1)C\", \"CC1=CC=C(C2=CC=C(Br)C=C2)C=C1\", \"CCCCOC1=CC2=CC=C(Br)C=C2C=C1\", \"BrC1=CC(CC2=C3C=CC=C2)=C3C=C1\"\n",
    "#     ]\n",
    "# }\n",
    "\n",
    "# # Create the DataFrame\n",
    "# bromide_coppermap = pd.DataFrame(data)\n",
    "\n",
    "# bromide_coppermap.to_csv('bromide_coppermap.csv', index=False)\n",
    "# # Display the DataFrame\n",
    "# # display(bromide_coppermap)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "228a9fdc",
   "metadata": {},
   "source": [
    "# IMPORTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "326af92b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-26T15:56:30.479232Z",
     "start_time": "2024-01-26T15:56:26.571137Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CUDA available: True\n",
      "CUDA device name: Tesla T4\n",
      "2.1.2+cu121\n",
      "12.1\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "\n",
    "from rdkit import Chem\n",
    "from rdkit.Chem import AllChem\n",
    "\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split, KFold\n",
    "\n",
    "import torch\n",
    "from torch_geometric.nn import SchNet, NNConv, global_mean_pool, radius_graph\n",
    "# from torch_geometric.loader import DataLoader\n",
    "from torch_geometric.loader import DataLoader as GeoDataLoader\n",
    "from torch_geometric.data import Data\n",
    "from torch_cluster import radius_graph\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "from torch.nn.functional import l1_loss\n",
    "from collections import defaultdict\n",
    "\n",
    "import itertools\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import ListedColormap\n",
    "import matplotlib.patches as patches\n",
    "from matplotlib.ticker import MultipleLocator\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "from collections import defaultdict\n",
    "\n",
    "print(\"CUDA available:\", torch.cuda.is_available())\n",
    "print(\"CUDA device name:\", torch.cuda.get_device_name(0))\n",
    "print(torch.__version__)\n",
    "print(torch.version.cuda)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6bf7e07a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8733cf48",
   "metadata": {},
   "source": [
    "# LOAD DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cad15935",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-26T15:56:31.202281Z",
     "start_time": "2024-01-26T15:56:30.480793Z"
    }
   },
   "outputs": [],
   "source": [
    "# ####### Load expt and DFT data\n",
    "# excel = \"computed_VBur\"\n",
    "# bromides = \"Sheet1\"\n",
    "# short_bromides = \"Sheet2\"#\"test\"\n",
    "\n",
    "# bromide = pd.read_excel(excel+\".xlsx\",bromides,header=0, engine='openpyxl')\n",
    "# short = pd.read_excel(excel+\".xlsx\",short_bromides,header=0, engine='openpyxl')\n",
    "\n",
    "# bromide.insert(0, 'ID', 'bromide_' + bromide.index.astype(str))\n",
    "# short.insert(0, 'ID', 'bromide_' + short.index.astype(str))\n",
    "\n",
    "# # display(bromide)\n",
    "\n",
    "\n",
    "# clean_df = bromide[bromide[\"Steric\"] > 40] \n",
    "# clean_df = clean_df.reset_index(drop=True)\n",
    "# clean_df.drop(columns=['C_Steric_lucas', 'C_Steric_therese', 'LEC', \"min\", 'max'], inplace=True)\n",
    "# # display(clean_df)\n",
    "\n",
    "# display(clean_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "702dedf6",
   "metadata": {},
   "source": [
    "# GENERATE CONFORMERS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2363181",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import os\n",
    "# from rdkit import Chem\n",
    "# from rdkit.Chem import AllChem\n",
    "\n",
    "# def save_conformer_as_sdf(mol, base_file_name, conformer_id, output_dir):\n",
    "#     # Construct file name with the specified format\n",
    "#     file_name = os.path.join(output_dir, f\"{base_file_name}_conf_{conformer_id+1}.sdf\")\n",
    "#     writer = Chem.SDWriter(file_name)\n",
    "#     writer.write(mol, confId=conformer_id)\n",
    "#     writer.close()\n",
    "#     return file_name\n",
    "\n",
    "# def generate_and_save_conformers(smiles, molecule_id, output_dir, num_conformers=10):\n",
    "#     mol = Chem.MolFromSmiles(smiles)\n",
    "#     mol = Chem.AddHs(mol)\n",
    "#     # Generate multiple conformers\n",
    "#     _ = AllChem.EmbedMultipleConfs(mol, numConfs=num_conformers)\n",
    "    \n",
    "#     # Save each conformer\n",
    "#     conformer_file_paths = []\n",
    "#     for confId in range(mol.GetNumConformers()):\n",
    "#         file_path = save_conformer_as_sdf(mol, f\"{molecule_id}\", confId, output_dir)\n",
    "#         conformer_file_paths.append(file_path)\n",
    "    \n",
    "#     return conformer_file_paths\n",
    "\n",
    "# # Ensure the output directory exists\n",
    "# output_dir = \"/uufs/chpc.utah.edu/common/home/u6048529/prediction/all_conformers/\"\n",
    "# os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "# dataframe = clean_df.copy()\n",
    "# # Modify your workflow to save all conformers and store their file paths\n",
    "# dataframe['conformer_file_paths'] = dataframe.apply(lambda row: generate_and_save_conformers(row['smiles'], row['ID'], output_dir), axis=1)\n",
    "\n",
    "# display(dataframe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7fd028f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dataframe.to_excel(\"sdf_all_dataframe.xlsx\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be197380",
   "metadata": {},
   "source": [
    "# LOAD CONFORMERS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13b464a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>id_lucas</th>\n",
       "      <th>id_therese</th>\n",
       "      <th>smiles</th>\n",
       "      <th>Steric</th>\n",
       "      <th>conformer_file_paths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bromide_0</td>\n",
       "      <td>alle_1</td>\n",
       "      <td>arbr2085</td>\n",
       "      <td>Brc1nc2ccccc2[nH]1</td>\n",
       "      <td>54.717780</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bromide_1</td>\n",
       "      <td>alle_1000</td>\n",
       "      <td>arbr2054</td>\n",
       "      <td>Brc1cscn1</td>\n",
       "      <td>57.009990</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bromide_2</td>\n",
       "      <td>alle_114</td>\n",
       "      <td>arbr1507</td>\n",
       "      <td>Brc1cccc2ncccc12</td>\n",
       "      <td>64.538880</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bromide_3</td>\n",
       "      <td>alle_116</td>\n",
       "      <td>arbr4572</td>\n",
       "      <td>COc1ccc(Br)cc1F</td>\n",
       "      <td>60.668440</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>bromide_4</td>\n",
       "      <td>alle_117</td>\n",
       "      <td>arbr1531</td>\n",
       "      <td>Brc1cccc2cccnc12</td>\n",
       "      <td>63.409660</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5664</th>\n",
       "      <td>bromide_5695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr794</td>\n",
       "      <td>Brc1ccc(-c2cccc3ccccc23)cc1</td>\n",
       "      <td>60.805468</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5665</th>\n",
       "      <td>bromide_5696</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr795</td>\n",
       "      <td>Brc1ccc(-c2cccc3c2oc2ccccc23)cc1</td>\n",
       "      <td>60.598725</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5666</th>\n",
       "      <td>bromide_5697</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr798</td>\n",
       "      <td>Brc1ccc(-c2ccccn2)cc1</td>\n",
       "      <td>60.630085</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5667</th>\n",
       "      <td>bromide_5698</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr799</td>\n",
       "      <td>CC(C)(C)OC(=O)n1cccc1-c1ccc(Br)cc1</td>\n",
       "      <td>60.764236</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5668</th>\n",
       "      <td>bromide_5699</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr800</td>\n",
       "      <td>Brc1ccc(-c2cccnc2)cc1</td>\n",
       "      <td>60.658541</td>\n",
       "      <td>['/uufs/chpc.utah.edu/common/home/u6048529/pre...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5669 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                ID   id_lucas id_therese                              smiles  \\\n",
       "0        bromide_0     alle_1   arbr2085                  Brc1nc2ccccc2[nH]1   \n",
       "1        bromide_1  alle_1000   arbr2054                           Brc1cscn1   \n",
       "2        bromide_2   alle_114   arbr1507                    Brc1cccc2ncccc12   \n",
       "3        bromide_3   alle_116   arbr4572                     COc1ccc(Br)cc1F   \n",
       "4        bromide_4   alle_117   arbr1531                    Brc1cccc2cccnc12   \n",
       "...            ...        ...        ...                                 ...   \n",
       "5664  bromide_5695        NaN    arbr794         Brc1ccc(-c2cccc3ccccc23)cc1   \n",
       "5665  bromide_5696        NaN    arbr795    Brc1ccc(-c2cccc3c2oc2ccccc23)cc1   \n",
       "5666  bromide_5697        NaN    arbr798               Brc1ccc(-c2ccccn2)cc1   \n",
       "5667  bromide_5698        NaN    arbr799  CC(C)(C)OC(=O)n1cccc1-c1ccc(Br)cc1   \n",
       "5668  bromide_5699        NaN    arbr800               Brc1ccc(-c2cccnc2)cc1   \n",
       "\n",
       "         Steric                               conformer_file_paths  \n",
       "0     54.717780  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "1     57.009990  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "2     64.538880  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "3     60.668440  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "4     63.409660  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "...         ...                                                ...  \n",
       "5664  60.805468  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "5665  60.598725  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "5666  60.630085  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "5667  60.764236  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "5668  60.658541  ['/uufs/chpc.utah.edu/common/home/u6048529/pre...  \n",
       "\n",
       "[5669 rows x 6 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "excel = \"../sdf_all_dataframe\"\n",
    "bromides = \"Sheet1\"\n",
    "\n",
    "bromide = pd.read_excel(excel+\".xlsx\",bromides,header=0, engine='openpyxl')\n",
    "\n",
    "# print(len(bromide))\n",
    "def count_bromine_atoms(smiles):\n",
    "    mol = Chem.MolFromSmiles(smiles)\n",
    "    bromide_smarts = Chem.MolFromSmarts(\"Br\")\n",
    "    num_bromides = len(mol.GetSubstructMatches(bromide_smarts))\n",
    "    return num_bromides\n",
    "bromide = bromide[bromide['smiles'].apply(count_bromine_atoms) <= 1]\n",
    "bromide = bromide.reset_index(drop=True)\n",
    "# Display the filtered DataFrame\n",
    "# print(len(bromide))\n",
    "\n",
    "clean_df = bromide[bromide[\"Steric\"] > 40] \n",
    "clean_df = clean_df.reset_index(drop=True)\n",
    "display(clean_df)\n",
    "\n",
    "bromide_coppermap = pd.read_csv('bromide_coppermap.csv')\n",
    "# display(bromide_coppermap)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1dd8ed0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from rdkit import Chem\n",
    "from ast import literal_eval\n",
    "\n",
    "def convert_string_to_list(row):\n",
    "    try:\n",
    "        # Safely evaluate the string as a Python list\n",
    "        return literal_eval(row['conformer_file_paths'])\n",
    "    except ValueError:\n",
    "        # Return an empty list in case of an error\n",
    "        return []\n",
    "\n",
    "clean_df['conformer_file_paths'] = clean_df.apply(convert_string_to_list, axis=1)\n",
    "\n",
    "def load_molecule_from_sdf(sdf_path):\n",
    "    \"\"\"Load a molecule from an SDF file.\"\"\"\n",
    "    if not os.path.isfile(sdf_path):\n",
    "        print(f\"Warning: File {sdf_path} not found.\")\n",
    "        return None\n",
    "    try:\n",
    "        suppl = Chem.SDMolSupplier(sdf_path)\n",
    "        for mol in suppl:\n",
    "            if mol is not None:\n",
    "                return mol\n",
    "    except Exception as e:\n",
    "        print(f\"Error reading {sdf_path}: {e}\")\n",
    "    return None\n",
    "\n",
    "def load_and_distribute_conformers(row, num_conformers=10):\n",
    "    \"\"\"Function to load conformers and distribute them across columns.\"\"\"\n",
    "    conformers = row['conformer_file_paths']\n",
    "    loaded_conformers = [load_molecule_from_sdf(path) for path in conformers[:num_conformers]]\n",
    "    return pd.Series(loaded_conformers)\n",
    "\n",
    "# Prepare DataFrame to hold the new conformer columns\n",
    "num_conformers = 10\n",
    "column_names = [f'conf_{i+1}' for i in range(num_conformers)]\n",
    "for i in range(num_conformers):\n",
    "    clean_df[f'conf_{i+1}'] = None\n",
    "\n",
    "# Apply the function to load conformers into the DataFrame\n",
    "clean_df[column_names] = clean_df.apply(lambda row: load_and_distribute_conformers(row, num_conformers), axis=1)\n",
    "\n",
    "# Display the updated DataFrame\n",
    "\n",
    "# Merge bromide_coppermap with clean_df on 'id_lucas' to get the matching rows\n",
    "bromides_test = pd.merge(bromide_coppermap, clean_df, on='id_lucas', how='inner')\n",
    "# Delete the column \"smiles_x\"\n",
    "bromides_test.drop(columns=['smiles_x'], inplace=True)\n",
    "# Rename \"smiles_y\" to \"smiles\"\n",
    "bromides_test.rename(columns={'smiles_y': 'smiles'}, inplace=True)\n",
    "\n",
    "# Drop the matching rows from clean_df\n",
    "clean_df = clean_df[~clean_df['id_lucas'].isin(bromides_test['id_lucas'])]\n",
    "# display(bromides_test)\n",
    "# display(clean_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fcd093d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_lucas</th>\n",
       "      <th>ID</th>\n",
       "      <th>id_therese</th>\n",
       "      <th>smiles</th>\n",
       "      <th>Steric</th>\n",
       "      <th>conformer_file_paths</th>\n",
       "      <th>conf_1</th>\n",
       "      <th>conf_2</th>\n",
       "      <th>conf_3</th>\n",
       "      <th>conf_4</th>\n",
       "      <th>conf_5</th>\n",
       "      <th>conf_6</th>\n",
       "      <th>conf_7</th>\n",
       "      <th>conf_8</th>\n",
       "      <th>conf_9</th>\n",
       "      <th>conf_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alle_151</td>\n",
       "      <td>bromide_9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>COc1cccc(Br)n1</td>\n",
       "      <td>58.50494</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f8b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f920&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f990&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fa00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fa70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fae0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fb50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fbc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fc30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fca0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>alle_1000</td>\n",
       "      <td>bromide_1</td>\n",
       "      <td>arbr2054</td>\n",
       "      <td>Brc1cscn1</td>\n",
       "      <td>57.00999</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d4d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d540&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d5b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d620&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d690&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d700&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d770&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d7e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d850&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d8c0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>alle_41</td>\n",
       "      <td>bromide_24</td>\n",
       "      <td>arbr1505</td>\n",
       "      <td>Brc1cccc2ccccc12</td>\n",
       "      <td>64.65710</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fb50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fbc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fc30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fca0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fd10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fd80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fdf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fe60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fed0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ff40&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>alle_20</td>\n",
       "      <td>bromide_20</td>\n",
       "      <td>arbr5972</td>\n",
       "      <td>N#Cc1ccc(Br)cc1</td>\n",
       "      <td>60.69873</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e9d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ea40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eab0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eb20&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eb90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ec00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ec70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ece0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ed50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5edc0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>alle_178</td>\n",
       "      <td>bromide_14</td>\n",
       "      <td>arbr5030</td>\n",
       "      <td>Cc1ccccc1Br</td>\n",
       "      <td>65.48523</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cf90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d000&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d070&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d0e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d150&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d1c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d230&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d2a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d310&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d380&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>alle_27</td>\n",
       "      <td>bromide_21</td>\n",
       "      <td>arbr1644</td>\n",
       "      <td>Brc1ccccn1</td>\n",
       "      <td>58.20211</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ee30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eea0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ef10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ef80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eff0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f060&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f0d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f140&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f1b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f220&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>alle_7</td>\n",
       "      <td>bromide_25</td>\n",
       "      <td>arbr5657</td>\n",
       "      <td>Fc1ccc(Br)cc1</td>\n",
       "      <td>60.65971</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc040&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc0b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc120&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc190&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc200&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc270&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc2e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc350&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc3c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc430&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>alle_13</td>\n",
       "      <td>bromide_6</td>\n",
       "      <td>arbr4620</td>\n",
       "      <td>COc1cccc(Br)c1</td>\n",
       "      <td>60.83675</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31eab0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31eb20&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31eb90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ec00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ec70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ece0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ed50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31edc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ee30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31eea0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>alle_190</td>\n",
       "      <td>bromide_18</td>\n",
       "      <td>arbr5634</td>\n",
       "      <td>Fc1ccc(F)c(Br)c1</td>\n",
       "      <td>62.69102</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e110&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e180&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e1f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e260&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e2d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e340&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e3b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e420&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e490&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e500&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>alle_117</td>\n",
       "      <td>bromide_4</td>\n",
       "      <td>arbr1531</td>\n",
       "      <td>Brc1cccc2cccnc12</td>\n",
       "      <td>63.40966</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e1f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e260&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e2d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e340&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e3b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e420&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e490&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e500&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e570&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e5e0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>alle_116</td>\n",
       "      <td>bromide_3</td>\n",
       "      <td>arbr4572</td>\n",
       "      <td>COc1ccc(Br)cc1F</td>\n",
       "      <td>60.66844</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dd90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31de00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31de70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dee0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31df50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dfc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e030&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e0a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e110&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e180&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>alle_140</td>\n",
       "      <td>bromide_7</td>\n",
       "      <td>arbr5718</td>\n",
       "      <td>Fc1cccc(Br)c1</td>\n",
       "      <td>60.79191</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ef10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ef80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31eff0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f060&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f0d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f140&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f1b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f220&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f290&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f300&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>alle_169</td>\n",
       "      <td>bromide_12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Brc1cccc(Oc2ccccc2)c1</td>\n",
       "      <td>60.86121</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c6d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c740&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c7b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c820&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c890&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c900&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c970&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c9e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ca50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cac0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>alle_153</td>\n",
       "      <td>bromide_10</td>\n",
       "      <td>arbr2702</td>\n",
       "      <td>CCc1ccc(Br)cc1</td>\n",
       "      <td>60.63525</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fd10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fd80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fdf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fe60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31fed0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c040&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c0b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c120&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c190&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c200&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>alle_153</td>\n",
       "      <td>bromide_11</td>\n",
       "      <td>arbr3364</td>\n",
       "      <td>CCc1ccc(Br)cc1</td>\n",
       "      <td>60.63525</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c270&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c2e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c350&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c3c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c430&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c4a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c510&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c580&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c5f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c660&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>alle_144</td>\n",
       "      <td>bromide_8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fc1cccc(Br)n1</td>\n",
       "      <td>58.33372</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f3e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f450&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f4c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f530&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f5a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f610&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f680&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f6f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f760&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31f7d0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>alle_123</td>\n",
       "      <td>bromide_5</td>\n",
       "      <td>arbr4347</td>\n",
       "      <td>COc1ccc(Br)cc1OC</td>\n",
       "      <td>60.79249</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e650&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e6c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e730&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e7a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e810&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e880&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e8f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e960&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31e9d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ea40&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>alle_114</td>\n",
       "      <td>bromide_2</td>\n",
       "      <td>arbr1507</td>\n",
       "      <td>Brc1cccc2ncccc12</td>\n",
       "      <td>64.53888</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d930&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d9a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31da10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31da80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31daf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31db60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dbd0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dc40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dcb0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31dd20&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>alle_170</td>\n",
       "      <td>bromide_13</td>\n",
       "      <td>arbr5642</td>\n",
       "      <td>Cc1cc(F)ccc1Br</td>\n",
       "      <td>65.46543</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cb30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cba0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cc10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cc80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ccf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cd60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cdd0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ce40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ceb0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cf20&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>alle_184</td>\n",
       "      <td>bromide_15</td>\n",
       "      <td>arbr5004</td>\n",
       "      <td>Cc1ccc2ccccc2c1Br</td>\n",
       "      <td>69.41390</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d3f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d460&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d4d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d540&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d5b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d620&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d690&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d700&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d770&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d7e0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>alle_188</td>\n",
       "      <td>bromide_16</td>\n",
       "      <td>arbr2680</td>\n",
       "      <td>CCc1ccccc1Br</td>\n",
       "      <td>65.75429</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d850&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d8c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d930&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d9a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5da10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5da80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5daf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5db60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dbd0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dc40&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>alle_188</td>\n",
       "      <td>bromide_17</td>\n",
       "      <td>arbr3371</td>\n",
       "      <td>CCc1ccccc1Br</td>\n",
       "      <td>65.75429</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dcb0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dd20&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dd90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5de00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5de70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dee0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5df50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dfc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e030&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e0a0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>alle_195</td>\n",
       "      <td>bromide_19</td>\n",
       "      <td>arbr4907</td>\n",
       "      <td>Cc1ccc(C)c(Br)c1</td>\n",
       "      <td>65.69081</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e570&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e5e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e650&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e6c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e730&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e7a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e810&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e880&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e8f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e960&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>alle_148</td>\n",
       "      <td>bromide_84</td>\n",
       "      <td>arbr5733</td>\n",
       "      <td>Fc1ccccc1Br</td>\n",
       "      <td>62.62230</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8430&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc84a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8510&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8580&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc85f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8660&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc86d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8740&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc87b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8820&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>alle_97</td>\n",
       "      <td>bromide_388</td>\n",
       "      <td>arbr4643</td>\n",
       "      <td>COc1ccccc1Br</td>\n",
       "      <td>63.45218</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8200&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8270&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c82e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8350&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c83c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8430&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c84a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8510&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8580&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec7c85f0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>alle_400</td>\n",
       "      <td>bromide_322</td>\n",
       "      <td>arbr4467</td>\n",
       "      <td>COc1ccc(Br)c(C)c1</td>\n",
       "      <td>65.41535</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec995e70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec995ee0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec995f50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec995fc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec996030&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9960a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec996110&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec996180&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9961f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec996260&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>alle_167</td>\n",
       "      <td>bromide_102</td>\n",
       "      <td>arbr5021</td>\n",
       "      <td>Cc1cccc(C)c1Br</td>\n",
       "      <td>70.18729</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd380&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd3f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd460&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd4d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd540&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd5b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd620&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd690&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd700&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd770&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>alle_56</td>\n",
       "      <td>bromide_355</td>\n",
       "      <td>arbr4812</td>\n",
       "      <td>Cc1cccc(Br)c1C</td>\n",
       "      <td>65.77350</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9aaff0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab060&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab0d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab140&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab1b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab220&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab290&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab300&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab370&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab3e0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>alle_196</td>\n",
       "      <td>bromide_124</td>\n",
       "      <td>arbr5631</td>\n",
       "      <td>Cc1ccc(F)cc1Br</td>\n",
       "      <td>65.56618</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf450&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf4c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf530&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf5a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf610&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf680&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf6f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf760&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf7d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf840&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>alle_2003</td>\n",
       "      <td>bromide_28</td>\n",
       "      <td>arbr5988</td>\n",
       "      <td>N#Cc1ccc(Br)cc1F</td>\n",
       "      <td>60.79890</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcd60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcdd0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfce40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfceb0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcf20&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcf90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd000&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd070&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd0e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd150&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>alle_2005</td>\n",
       "      <td>bromide_30</td>\n",
       "      <td>arbr590</td>\n",
       "      <td>O=C(c1ccccc1)c1ccc(Br)cc1</td>\n",
       "      <td>60.73134</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd620&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd690&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd700&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd770&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd7e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd850&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd8c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd930&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd9a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfda10&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>alle_2006</td>\n",
       "      <td>bromide_31</td>\n",
       "      <td>arbr270</td>\n",
       "      <td>CC(C)(C)c1cc(Br)cc(C(C)(C)C)c1</td>\n",
       "      <td>62.07079</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfda80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdaf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdb60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdbd0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdc40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdcb0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdd20&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdd90&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfde00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfde70&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>alle_2008</td>\n",
       "      <td>bromide_33</td>\n",
       "      <td>arbr4961</td>\n",
       "      <td>Cc1ccc(-c2ccc(Br)cc2)cc1</td>\n",
       "      <td>60.65214</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe340&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe3b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe420&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe490&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe500&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe570&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe5e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe650&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe6c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe730&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>alle_2011</td>\n",
       "      <td>bromide_37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CCCCOc1ccc2cc(Br)ccc2c1</td>\n",
       "      <td>60.87868</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff4c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff530&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff5a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff610&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff680&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff6f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff760&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff7d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff840&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff8b0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>alle_2012</td>\n",
       "      <td>bromide_38</td>\n",
       "      <td>arbr34</td>\n",
       "      <td>Brc1ccc2c(c1)Cc1ccccc1-2</td>\n",
       "      <td>60.88043</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff920&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdff990&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffa00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffa70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffae0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffb50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffbc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffc30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffca0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdffd10&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id_lucas           ID id_therese                          smiles  \\\n",
       "0    alle_151    bromide_9        NaN                  COc1cccc(Br)n1   \n",
       "1   alle_1000    bromide_1   arbr2054                       Brc1cscn1   \n",
       "2     alle_41   bromide_24   arbr1505                Brc1cccc2ccccc12   \n",
       "3     alle_20   bromide_20   arbr5972                 N#Cc1ccc(Br)cc1   \n",
       "4    alle_178   bromide_14   arbr5030                     Cc1ccccc1Br   \n",
       "5     alle_27   bromide_21   arbr1644                      Brc1ccccn1   \n",
       "6      alle_7   bromide_25   arbr5657                   Fc1ccc(Br)cc1   \n",
       "7     alle_13    bromide_6   arbr4620                  COc1cccc(Br)c1   \n",
       "8    alle_190   bromide_18   arbr5634                Fc1ccc(F)c(Br)c1   \n",
       "9    alle_117    bromide_4   arbr1531                Brc1cccc2cccnc12   \n",
       "10   alle_116    bromide_3   arbr4572                 COc1ccc(Br)cc1F   \n",
       "11   alle_140    bromide_7   arbr5718                   Fc1cccc(Br)c1   \n",
       "12   alle_169   bromide_12        NaN           Brc1cccc(Oc2ccccc2)c1   \n",
       "13   alle_153   bromide_10   arbr2702                  CCc1ccc(Br)cc1   \n",
       "14   alle_153   bromide_11   arbr3364                  CCc1ccc(Br)cc1   \n",
       "15   alle_144    bromide_8        NaN                   Fc1cccc(Br)n1   \n",
       "16   alle_123    bromide_5   arbr4347                COc1ccc(Br)cc1OC   \n",
       "17   alle_114    bromide_2   arbr1507                Brc1cccc2ncccc12   \n",
       "18   alle_170   bromide_13   arbr5642                  Cc1cc(F)ccc1Br   \n",
       "19   alle_184   bromide_15   arbr5004               Cc1ccc2ccccc2c1Br   \n",
       "20   alle_188   bromide_16   arbr2680                    CCc1ccccc1Br   \n",
       "21   alle_188   bromide_17   arbr3371                    CCc1ccccc1Br   \n",
       "22   alle_195   bromide_19   arbr4907                Cc1ccc(C)c(Br)c1   \n",
       "23   alle_148   bromide_84   arbr5733                     Fc1ccccc1Br   \n",
       "24    alle_97  bromide_388   arbr4643                    COc1ccccc1Br   \n",
       "25   alle_400  bromide_322   arbr4467               COc1ccc(Br)c(C)c1   \n",
       "26   alle_167  bromide_102   arbr5021                  Cc1cccc(C)c1Br   \n",
       "27    alle_56  bromide_355   arbr4812                  Cc1cccc(Br)c1C   \n",
       "28   alle_196  bromide_124   arbr5631                  Cc1ccc(F)cc1Br   \n",
       "29  alle_2003   bromide_28   arbr5988                N#Cc1ccc(Br)cc1F   \n",
       "30  alle_2005   bromide_30    arbr590       O=C(c1ccccc1)c1ccc(Br)cc1   \n",
       "31  alle_2006   bromide_31    arbr270  CC(C)(C)c1cc(Br)cc(C(C)(C)C)c1   \n",
       "32  alle_2008   bromide_33   arbr4961        Cc1ccc(-c2ccc(Br)cc2)cc1   \n",
       "33  alle_2011   bromide_37        NaN         CCCCOc1ccc2cc(Br)ccc2c1   \n",
       "34  alle_2012   bromide_38     arbr34        Brc1ccc2c(c1)Cc1ccccc1-2   \n",
       "\n",
       "      Steric                               conformer_file_paths  \\\n",
       "0   58.50494  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "1   57.00999  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "2   64.65710  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "3   60.69873  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "4   65.48523  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "5   58.20211  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "6   60.65971  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "7   60.83675  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "8   62.69102  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "9   63.40966  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "10  60.66844  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "11  60.79191  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "12  60.86121  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "13  60.63525  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "14  60.63525  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "15  58.33372  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "16  60.79249  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "17  64.53888  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "18  65.46543  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "19  69.41390  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "20  65.75429  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "21  65.75429  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "22  65.69081  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "23  62.62230  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "24  63.45218  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "25  65.41535  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "26  70.18729  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "27  65.77350  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "28  65.56618  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "29  60.79890  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "30  60.73134  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "31  62.07079  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "32  60.65214  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "33  60.87868  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "34  60.88043  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "\n",
       "                                              conf_1  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f8b0>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d4d0>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fb50>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e9d0>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cf90>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ee30>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc040>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31eab0>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e110>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e1f0>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dd90>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ef10>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c6d0>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fd10>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c270>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f3e0>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e650>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d930>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cb30>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d3f0>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d850>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dcb0>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e570>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8430>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8200>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec995e70>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd380>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9aaff0>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf450>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcd60>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd620>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfda80>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe340>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff4c0>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff920>   \n",
       "\n",
       "                                              conf_2  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f920>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d540>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fbc0>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ea40>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d000>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eea0>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc0b0>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31eb20>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e180>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e260>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31de00>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ef80>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c740>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fd80>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c2e0>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f450>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e6c0>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d9a0>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cba0>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d460>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d8c0>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dd20>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e5e0>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc84a0>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8270>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec995ee0>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd3f0>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab060>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf4c0>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcdd0>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd690>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdaf0>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe3b0>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff530>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff990>   \n",
       "\n",
       "                                              conf_3  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f990>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d5b0>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fc30>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eab0>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d070>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ef10>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc120>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31eb90>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e1f0>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e2d0>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31de70>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31eff0>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c7b0>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fdf0>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c350>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f4c0>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e730>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31da10>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cc10>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d4d0>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d930>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dd90>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e650>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8510>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c82e0>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec995f50>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd460>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab0d0>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf530>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfce40>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd700>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdb60>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe420>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff5a0>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffa00>   \n",
       "\n",
       "                                              conf_4  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fa00>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d620>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fca0>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eb20>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d0e0>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ef80>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc190>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ec00>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e260>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e340>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dee0>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f060>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c820>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fe60>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c3c0>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f530>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e7a0>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31da80>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cc80>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d540>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d9a0>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5de00>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e6c0>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8580>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8350>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec995fc0>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd4d0>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab140>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf5a0>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfceb0>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd770>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdbd0>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe490>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff610>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffa70>   \n",
       "\n",
       "                                              conf_5  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fa70>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d690>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fd10>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eb90>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d150>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5eff0>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc200>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ec70>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e2d0>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e3b0>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31df50>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f0d0>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c890>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fed0>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c430>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f5a0>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e810>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31daf0>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ccf0>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d5b0>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5da10>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5de70>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e730>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc85f0>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c83c0>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec996030>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd540>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab1b0>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf610>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcf20>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd7e0>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdc40>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe500>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff680>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffae0>   \n",
       "\n",
       "                                              conf_6  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fae0>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d700>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fd80>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ec00>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d1c0>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f060>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc270>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ece0>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e340>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e420>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dfc0>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f140>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c900>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c040>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c4a0>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f610>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e880>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31db60>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cd60>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d620>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5da80>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dee0>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e7a0>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8660>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8430>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9960a0>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd5b0>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab220>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf680>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcf90>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd850>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdcb0>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe570>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff6f0>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffb50>   \n",
       "\n",
       "                                              conf_7  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fb50>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d770>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fdf0>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ec70>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d230>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f0d0>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc2e0>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ed50>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e3b0>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e490>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e030>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f1b0>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c970>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c0b0>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c510>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f680>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e8f0>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dbd0>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cdd0>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d690>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5daf0>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5df50>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e810>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc86d0>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c84a0>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec996110>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd620>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab290>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf6f0>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd000>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd8c0>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdd20>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe5e0>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff760>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffbc0>   \n",
       "\n",
       "                                              conf_8  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fbc0>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d7e0>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fe60>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ece0>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d2a0>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f140>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc350>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31edc0>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e420>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e500>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e0a0>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f220>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c9e0>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c120>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c580>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f6f0>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e960>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dc40>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ce40>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d700>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5db60>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dfc0>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e880>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8740>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8510>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec996180>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd690>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab300>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf760>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd070>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd930>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfdd90>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe650>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff7d0>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffc30>   \n",
       "\n",
       "                                              conf_9  \\\n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fc30>   \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d850>   \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fed0>   \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ed50>   \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d310>   \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f1b0>   \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc3c0>   \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ee30>   \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e490>   \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e570>   \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e110>   \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f290>   \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ca50>   \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c190>   \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c5f0>   \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f760>   \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e9d0>   \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dcb0>   \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5ceb0>   \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d770>   \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dbd0>   \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e030>   \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e8f0>   \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc87b0>   \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c8580>   \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9961f0>   \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd700>   \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab370>   \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf7d0>   \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd0e0>   \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd9a0>   \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfde00>   \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe6c0>   \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff840>   \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffca0>   \n",
       "\n",
       "                                             conf_10  \n",
       "0   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31fca0>  \n",
       "1   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d8c0>  \n",
       "2   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ff40>  \n",
       "3   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5edc0>  \n",
       "4   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d380>  \n",
       "5   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f220>  \n",
       "6   <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc430>  \n",
       "7   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31eea0>  \n",
       "8   <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e500>  \n",
       "9   <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e5e0>  \n",
       "10  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31e180>  \n",
       "11  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f300>  \n",
       "12  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cac0>  \n",
       "13  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c200>  \n",
       "14  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5c660>  \n",
       "15  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31f7d0>  \n",
       "16  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ea40>  \n",
       "17  <rdkit.Chem.rdchem.Mol object at 0x7f5ced31dd20>  \n",
       "18  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5cf20>  \n",
       "19  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5d7e0>  \n",
       "20  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5dc40>  \n",
       "21  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e0a0>  \n",
       "22  <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5e960>  \n",
       "23  <rdkit.Chem.rdchem.Mol object at 0x7f5ceccc8820>  \n",
       "24  <rdkit.Chem.rdchem.Mol object at 0x7f5cec7c85f0>  \n",
       "25  <rdkit.Chem.rdchem.Mol object at 0x7f5cec996260>  \n",
       "26  <rdkit.Chem.rdchem.Mol object at 0x7f5ced0cd770>  \n",
       "27  <rdkit.Chem.rdchem.Mol object at 0x7f5cec9ab3e0>  \n",
       "28  <rdkit.Chem.rdchem.Mol object at 0x7f5cec8bf840>  \n",
       "29  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfd150>  \n",
       "30  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfda10>  \n",
       "31  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfde70>  \n",
       "32  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfe730>  \n",
       "33  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdff8b0>  \n",
       "34  <rdkit.Chem.rdchem.Mol object at 0x7f5cecdffd10>  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>id_lucas</th>\n",
       "      <th>id_therese</th>\n",
       "      <th>smiles</th>\n",
       "      <th>Steric</th>\n",
       "      <th>conformer_file_paths</th>\n",
       "      <th>conf_1</th>\n",
       "      <th>conf_2</th>\n",
       "      <th>conf_3</th>\n",
       "      <th>conf_4</th>\n",
       "      <th>conf_5</th>\n",
       "      <th>conf_6</th>\n",
       "      <th>conf_7</th>\n",
       "      <th>conf_8</th>\n",
       "      <th>conf_9</th>\n",
       "      <th>conf_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bromide_0</td>\n",
       "      <td>alle_1</td>\n",
       "      <td>arbr2085</td>\n",
       "      <td>Brc1nc2ccccc2[nH]1</td>\n",
       "      <td>54.717780</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31cb30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31cba0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31cc10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31cac0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31cc80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ccf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31cdd0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31ce40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d3f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ced31d460&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>bromide_22</td>\n",
       "      <td>alle_28</td>\n",
       "      <td>arbr2114</td>\n",
       "      <td>Brc1ncccn1</td>\n",
       "      <td>55.623370</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f290&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f300&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f370&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f3e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f450&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f4c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f530&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f5a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f610&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f680&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>bromide_23</td>\n",
       "      <td>alle_340</td>\n",
       "      <td>arbr4603</td>\n",
       "      <td>COc1ccc2nc(Br)sc2c1</td>\n",
       "      <td>57.842200</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f6f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f760&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f7d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f840&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f8b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f920&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f990&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fa00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fa70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fae0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>bromide_26</td>\n",
       "      <td>alle_2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FC(F)(F)c1ccc(OCc2ccccc2)cc1Br</td>\n",
       "      <td>67.527020</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc4a0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc510&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc580&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc5f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc660&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc6d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc740&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc7b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc820&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc890&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>bromide_27</td>\n",
       "      <td>alle_2002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>O=C1c2ccccc2-c2ccc(Br)c3cccc1c23</td>\n",
       "      <td>64.681560</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc900&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc970&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc9e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfca50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcac0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcb30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcba0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcc10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcc80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5cecdfccf0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5664</th>\n",
       "      <td>bromide_5695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr794</td>\n",
       "      <td>Brc1ccc(-c2cccc3ccccc23)cc1</td>\n",
       "      <td>60.805468</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3760&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf37d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3840&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf38b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3920&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3990&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3a00&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3a70&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3ae0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3b50&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5665</th>\n",
       "      <td>bromide_5696</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr795</td>\n",
       "      <td>Brc1ccc(-c2cccc3c2oc2ccccc23)cc1</td>\n",
       "      <td>60.598725</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3bc0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3c30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3ca0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3d10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3d80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3df0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3e60&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3ed0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7beff40&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc040&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5666</th>\n",
       "      <td>bromide_5697</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr798</td>\n",
       "      <td>Brc1ccc(-c2ccccn2)cc1</td>\n",
       "      <td>60.630085</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc0b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc120&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc190&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc200&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc270&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc2e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc350&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc3c0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc430&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc4a0&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5667</th>\n",
       "      <td>bromide_5698</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr799</td>\n",
       "      <td>CC(C)(C)OC(=O)n1cccc1-c1ccc(Br)cc1</td>\n",
       "      <td>60.764236</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc510&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc580&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc5f0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc660&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc6d0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc740&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc7b0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc820&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc890&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc900&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5668</th>\n",
       "      <td>bromide_5699</td>\n",
       "      <td>NaN</td>\n",
       "      <td>arbr800</td>\n",
       "      <td>Brc1ccc(-c2cccnc2)cc1</td>\n",
       "      <td>60.658541</td>\n",
       "      <td>[/uufs/chpc.utah.edu/common/home/u6048529/pred...</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc970&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc9e0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfca50&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcac0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcb30&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcba0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcc10&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcc80&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfccf0&gt;</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcd60&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5634 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                ID   id_lucas id_therese                              smiles  \\\n",
       "0        bromide_0     alle_1   arbr2085                  Brc1nc2ccccc2[nH]1   \n",
       "22      bromide_22    alle_28   arbr2114                          Brc1ncccn1   \n",
       "23      bromide_23   alle_340   arbr4603                 COc1ccc2nc(Br)sc2c1   \n",
       "26      bromide_26  alle_2001        NaN      FC(F)(F)c1ccc(OCc2ccccc2)cc1Br   \n",
       "27      bromide_27  alle_2002        NaN    O=C1c2ccccc2-c2ccc(Br)c3cccc1c23   \n",
       "...            ...        ...        ...                                 ...   \n",
       "5664  bromide_5695        NaN    arbr794         Brc1ccc(-c2cccc3ccccc23)cc1   \n",
       "5665  bromide_5696        NaN    arbr795    Brc1ccc(-c2cccc3c2oc2ccccc23)cc1   \n",
       "5666  bromide_5697        NaN    arbr798               Brc1ccc(-c2ccccn2)cc1   \n",
       "5667  bromide_5698        NaN    arbr799  CC(C)(C)OC(=O)n1cccc1-c1ccc(Br)cc1   \n",
       "5668  bromide_5699        NaN    arbr800               Brc1ccc(-c2cccnc2)cc1   \n",
       "\n",
       "         Steric                               conformer_file_paths  \\\n",
       "0     54.717780  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "22    55.623370  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "23    57.842200  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "26    67.527020  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "27    64.681560  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "...         ...                                                ...   \n",
       "5664  60.805468  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "5665  60.598725  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "5666  60.630085  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "5667  60.764236  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "5668  60.658541  [/uufs/chpc.utah.edu/common/home/u6048529/pred...   \n",
       "\n",
       "                                                conf_1  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31cb30>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f290>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f6f0>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc4a0>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc900>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3760>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3bc0>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc0b0>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc510>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc970>   \n",
       "\n",
       "                                                conf_2  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31cba0>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f300>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f760>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc510>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc970>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf37d0>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3c30>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc120>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc580>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc9e0>   \n",
       "\n",
       "                                                conf_3  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31cc10>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f370>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f7d0>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc580>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc9e0>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3840>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3ca0>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc190>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc5f0>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfca50>   \n",
       "\n",
       "                                                conf_4  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31cac0>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f3e0>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f840>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc5f0>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfca50>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf38b0>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3d10>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc200>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc660>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcac0>   \n",
       "\n",
       "                                                conf_5  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31cc80>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f450>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f8b0>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc660>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcac0>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3920>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3d80>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc270>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc6d0>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcb30>   \n",
       "\n",
       "                                                conf_6  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ccf0>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f4c0>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f920>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc6d0>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcb30>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3990>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3df0>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc2e0>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc740>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcba0>   \n",
       "\n",
       "                                                conf_7  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31cdd0>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f530>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f990>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc740>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcba0>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3a00>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3e60>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc350>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc7b0>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcc10>   \n",
       "\n",
       "                                                conf_8  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31ce40>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f5a0>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fa00>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc7b0>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcc10>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3a70>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3ed0>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc3c0>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc820>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcc80>   \n",
       "\n",
       "                                                conf_9  \\\n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d3f0>   \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f610>   \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fa70>   \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc820>   \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfcc80>   \n",
       "...                                                ...   \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3ae0>   \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7beff40>   \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc430>   \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc890>   \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfccf0>   \n",
       "\n",
       "                                               conf_10  \n",
       "0     <rdkit.Chem.rdchem.Mol object at 0x7f5ced31d460>  \n",
       "22    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5f680>  \n",
       "23    <rdkit.Chem.rdchem.Mol object at 0x7f5cecc5fae0>  \n",
       "26    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfc890>  \n",
       "27    <rdkit.Chem.rdchem.Mol object at 0x7f5cecdfccf0>  \n",
       "...                                                ...  \n",
       "5664  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bf3b50>  \n",
       "5665  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc040>  \n",
       "5666  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc4a0>  \n",
       "5667  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfc900>  \n",
       "5668  <rdkit.Chem.rdchem.Mol object at 0x7f5ce7bfcd60>  \n",
       "\n",
       "[5634 rows x 16 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(bromides_test)\n",
    "display(clean_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "064a7b00",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # display(bromides_test)\n",
    "# bromides_test.to_csv('bromide_test.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "09df5116",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import py3Dmol\n",
    "\n",
    "# def visualize_conformer(row, conf_col):\n",
    "#     # Initialize a viewer\n",
    "#     viewer = py3Dmol.view(width=800, height=400)\n",
    "\n",
    "#     # Check if the conformer column is not null\n",
    "#     if pd.notna(row[conf_col]):\n",
    "#         mol = row[conf_col]\n",
    "#         # Convert to 3Dmol.js format\n",
    "#         mb = Chem.MolToMolBlock(mol)\n",
    "#         viewer.addModel(mb, 'mol')\n",
    "    \n",
    "#     # Style the molecule and render\n",
    "#     viewer.setStyle({'stick': {}})\n",
    "#     viewer.zoomTo()\n",
    "#     return viewer\n",
    "\n",
    "# # Get the row for the molecule you want to visualize\n",
    "# visual_row = clean_df[clean_df['ID'] == 'bromide_3675'].iloc[0]\n",
    "\n",
    "# # Visualize the selected conformer (e.g., conf_1)\n",
    "# viewer = visualize_conformer(visual_row, 'conf_3')\n",
    "# viewer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6197c4cc",
   "metadata": {},
   "source": [
    "# PREPARING DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f164ec26",
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch_geometric.data import Data\n",
    "import torch\n",
    "\n",
    "def mol_to_graph_data(mol):\n",
    "    atomic_nums = [atom.GetAtomicNum() for atom in mol.GetAtoms()]\n",
    "    is_in_ring = [1 if atom.IsInRing() else 0 for atom in mol.GetAtoms()]\n",
    "    is_aromatic = [1 if atom.GetIsAromatic() else 0 for atom in mol.GetAtoms()]\n",
    "    number_bonds = [atom.GetDegree() for atom in mol.GetAtoms()]\n",
    "    \n",
    "    # One-hot encoding for number of bonds\n",
    "    max_bonds = 7  # Assuming a maximum of 6 bonds for any atom\n",
    "    one_hot_bonds = [[1 if i == nb else 0 for i in range(max_bonds)] for nb in number_bonds]\n",
    "\n",
    "    # Combine features\n",
    "    features = [[atomic_num] + [is_ring] + [is_arom] + bond_vec for atomic_num, is_ring, is_arom, bond_vec in zip(atomic_nums, is_in_ring, is_aromatic, one_hot_bonds)]\n",
    "    z = torch.tensor(features, dtype=torch.float)  # Adjusted to float for compatibility\n",
    "    return z\n",
    "\n",
    "def conformer_to_graph_data(conformer, z, target, molecule_id):\n",
    "    if conformer is None:\n",
    "        return None\n",
    "    positions = [conformer.GetConformer().GetAtomPosition(atom.GetIdx()) for atom in conformer.GetAtoms()]\n",
    "    pos = torch.tensor(positions, dtype=torch.float).view(-1, 3)\n",
    "\n",
    "    # Extract numeric part of molecule_id, assuming format \"prefix_number\"\n",
    "    numeric_id = int(molecule_id.split('_')[-1])  # Convert the numeric part to an integer\n",
    "    # Include numeric_id as an attribute in Data object\n",
    "    # Since now it's a numeric value, it can be stored as a tensor\n",
    "    data = Data(x=z, pos=pos, y=torch.tensor([target], dtype=torch.float), mol_id=torch.tensor([numeric_id]))\n",
    "    return data\n",
    "\n",
    "# dataframe = clean_df.copy()\n",
    "\n",
    "# # Generate a list of Data objects for all conformers across all molecules\n",
    "# graph_data_list = []\n",
    "# for _, row in dataframe.iterrows():\n",
    "#     z = mol_to_graph_data(row['conf_1'])  # Use 'conf_1' to represent common node features\n",
    "#     target = row['Steric']  # Use 'Steric' as the target property column\n",
    "#     molecule_id = row['ID']  # Get molecule ID from the DataFrame\n",
    "#     for i in range(1, 11):  # Loop through columns 'conf_1' to 'conf_10' for conformers\n",
    "#         conformer = row.get(f'conf_{i}', None)\n",
    "#         if conformer is not None:\n",
    "#             graph_data = conformer_to_graph_data(conformer, z, target, molecule_id)\n",
    "#             if graph_data is not None:\n",
    "#                 graph_data_list.append(graph_data)\n",
    "\n",
    "# # graph_data_list now contains Data objects for all conformers, with molecule IDs included\n",
    "# display(graph_data_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "789cdcbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "# Save the graph_data_list to a file\n",
    "# torch.save(graph_data_list, 'graph_data_list_train.pt')\n",
    "# torch.save(graph_data_list_test, 'graph_data_list_test.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e31c12ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the graph_data_list from the file\n",
    "graph_data_list = torch.load('graph_data_list_train.pt')\n",
    "graph_data_list_test = torch.load('graph_data_list_test.pt')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be80cf12",
   "metadata": {},
   "source": [
    "# NN MODEL "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80fd2290",
   "metadata": {},
   "source": [
    "## EMBEDDING LAYER FOR ATOMS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "98a989fd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-27T04:18:03.236982Z",
     "start_time": "2024-01-27T04:18:03.214620Z"
    }
   },
   "outputs": [],
   "source": [
    "class AtomEmbedding(nn.Module):\n",
    "    def __init__(self, embedding_dim):\n",
    "        super(AtomEmbedding, self).__init__()\n",
    "        # Embedding layers for atomic number, IsInRing, and IsAromatic\n",
    "        self.atomic_num_embedding = nn.Embedding(100, embedding_dim // 2)\n",
    "        self.is_in_ring_embedding = nn.Embedding(2, embedding_dim // 4)\n",
    "        self.is_aromatic_embedding = nn.Embedding(2, embedding_dim // 4)\n",
    "        \n",
    "    def forward(self, features):\n",
    "        # Split features\n",
    "        # features is expected to be of shape [num_atoms, 10]\n",
    "        # where the first three are atomic number, is_in_ring, is_aromatic\n",
    "        # and the last seven are the one-hot encoded bond vector\n",
    "        atomic_nums = features[..., 0]\n",
    "        is_in_ring = features[..., 1]\n",
    "        is_aromatic = features[..., 2]\n",
    "        one_hot_bond = features[..., 3:]\n",
    "\n",
    "        # Embed atomic number, IsInRing, and IsAromatic\n",
    "        atomic_num_embedded = self.atomic_num_embedding(atomic_nums)\n",
    "        is_in_ring_embedded = self.is_in_ring_embedding(is_in_ring)\n",
    "        is_aromatic_embedded = self.is_aromatic_embedding(is_aromatic)\n",
    "\n",
    "        # Concatenate embeddings and one-hot bond vector\n",
    "        return torch.cat(\n",
    "            [atomic_num_embedded, is_in_ring_embedded, is_aromatic_embedded, one_hot_bond], \n",
    "            dim=-1\n",
    "        )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "787e76b8",
   "metadata": {},
   "source": [
    "## RBF FOR DISTANCES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3394a95f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-27T04:18:06.079108Z",
     "start_time": "2024-01-27T04:18:06.063556Z"
    }
   },
   "outputs": [],
   "source": [
    "class RBFExpansion(nn.Module):\n",
    "    def __init__(self, num_rbf, cutoff):\n",
    "        super(RBFExpansion, self).__init__()\n",
    "        self.register_buffer('centers', torch.linspace(0, cutoff, num_rbf))\n",
    "        self.register_buffer('widths', torch.ones(num_rbf) * (cutoff / num_rbf))\n",
    "\n",
    "    def forward(self, distances):\n",
    "        distances = distances.unsqueeze(-1)  # [num_edges, 1]\n",
    "        rbf = torch.exp(-((distances - self.centers) ** 2) / (2 * self.widths ** 2))\n",
    "        return rbf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2053d69e",
   "metadata": {},
   "source": [
    "## MODEL ARCHITECTURE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0ab2be6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SchNetModified(nn.Module):\n",
    "    def __init__(self, embedding_dim, num_rbf, cutoff, num_filters, num_interactions):\n",
    "        super(SchNetModified, self).__init__()\n",
    "        self.cutoff = cutoff  # Define cutoff as an attribute\n",
    "        self.atom_embedding = AtomEmbedding(embedding_dim)\n",
    "        self.rbf_expansion = RBFExpansion(num_rbf, cutoff)\n",
    "        \n",
    "        # Calculate the total embedding dimension\n",
    "        total_embedding_dim = (embedding_dim // 2) + (embedding_dim // 4) + (embedding_dim // 4) + 7\n",
    "\n",
    "        # Adjust the Linear layer dimensions inside NNConv\n",
    "        self.interactions = nn.ModuleList([\n",
    "            NNConv(\n",
    "                in_channels=total_embedding_dim, \n",
    "                out_channels=num_filters, \n",
    "                nn=nn.Linear(num_rbf, total_embedding_dim * num_filters),  # Adjust this\n",
    "                aggr='mean'\n",
    "            )\n",
    "            for _ in range(num_interactions)\n",
    "        ])\n",
    "\n",
    "        # Adjust the output layer\n",
    "        self.lin = nn.Linear(total_embedding_dim, 1)  # Adjust the input size based on your task\n",
    "        self.dropout = nn.Dropout(p=0.2) # Example dropout; adjust p as needed\n",
    "\n",
    "    def forward(self, features, pos, batch):\n",
    "        features = features.long()\n",
    "        # Embed atomic numbers and print shape\n",
    "        node_features = self.atom_embedding(features)\n",
    "\n",
    "        # Calculate pairwise distances and expand with RBF\n",
    "        pairwise_distances = (pos.unsqueeze(1) - pos.unsqueeze(0)).norm(dim=-1)\n",
    "        edge_features = self.rbf_expansion(pairwise_distances)\n",
    "\n",
    "        # Compute edge_index based on distance cutoff\n",
    "        edge_index = radius_graph(pos, r=self.cutoff, batch=batch)\n",
    "\n",
    "        # Flatten the edge features for each edge\n",
    "        row, col = edge_index\n",
    "        edge_features = edge_features[row, col]\n",
    "        edge_features = edge_features.view(-1, num_rbf)  # Flatten to [num_edges, num_rbf]\n",
    "        \n",
    "        for interaction in self.interactions:\n",
    "            node_features = interaction(node_features, edge_index, edge_features)\n",
    "            node_features = self.dropout(node_features)  # Apply dropout\n",
    "\n",
    "        # Global pooling\n",
    "        pooled = global_mean_pool(node_features, batch)\n",
    "\n",
    "        # Output layer\n",
    "        output = self.lin(pooled)\n",
    "        return output.squeeze(-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95478831",
   "metadata": {},
   "source": [
    "# TRAINING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25e303d2",
   "metadata": {},
   "source": [
    "# CROSS-VALIDATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ac79988",
   "metadata": {},
   "source": [
    "## BATCHING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8614178",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from collections import defaultdict\n",
    "# import numpy as np\n",
    "# import torch\n",
    "# from torch_geometric.data import DataLoader, Batch\n",
    "# from torch_geometric.loader import DataLoader as GeoDataLoader\n",
    "\n",
    "# # Group conformers by molecule ID\n",
    "# conformers_by_mol_id = defaultdict(list)\n",
    "# for data in graph_data_list:\n",
    "#     mol_id = data.mol_id.item()  # Convert tensor mol_id to integer or use directly if it's already appropriate\n",
    "#     conformers_by_mol_id[mol_id].append(data)\n",
    "\n",
    "# # Define train, validation, and test ratios\n",
    "# train_ratio = 0.7\n",
    "# test_ratio = 0.2  # This could be computed as 1 - train_ratio - val_ratio for clarity\n",
    "\n",
    "# # Set a random seed for reproducibility\n",
    "# np.random.seed(42)\n",
    "\n",
    "# # Shuffle molecule IDs to ensure random distribution\n",
    "# mol_ids = list(conformers_by_mol_id.keys())\n",
    "# np.random.shuffle(mol_ids)\n",
    "\n",
    "# # Calculate indices for splitting the molecule IDs\n",
    "# num_mols = len(mol_ids)\n",
    "# train_end = int(train_ratio * num_mols)\n",
    "\n",
    "# # Split molecule IDs into train, validation, and test sets\n",
    "# train_mol_ids = mol_ids[:train_end]\n",
    "# test_mol_ids = mol_ids[train_end:]\n",
    "\n",
    "# # Collect conformers for each split based on molecule IDs\n",
    "# test_data = [data for mol_id in test_mol_ids for data in conformers_by_mol_id[mol_id]]\n",
    "\n",
    "# # Define a custom collate function for the DataLoader\n",
    "# def collate_fn(data_list):\n",
    "#     batch = Batch.from_data_list(data_list)\n",
    "#     mol_ids = torch.cat([data.mol_id for data in data_list], dim=0)  # Concatenate mol_id tensors\n",
    "#     batch.mol_id = mol_ids\n",
    "#     return batch\n",
    "\n",
    "# batch_size = 32\n",
    "\n",
    "# test_loader = GeoDataLoader(test_data, batch_size=batch_size, shuffle=False, collate_fn=collate_fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4f8e26e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch_geometric.data import Batch\n",
    "from sklearn.model_selection import train_test_split\n",
    "from torch_geometric.loader import DataLoader as GeoDataLoader\n",
    "\n",
    "# Group conformers by molecule ID\n",
    "conformers_by_mol_id = defaultdict(list)\n",
    "for data in graph_data_list:\n",
    "    mol_id = data.mol_id.item()  # Convert tensor mol_id to integer or use directly if it's already appropriate\n",
    "    conformers_by_mol_id[mol_id].append(data)\n",
    "\n",
    "# Define train, test, and validation ratios\n",
    "train_ratio = 0.8\n",
    "test_ratio = 0.2\n",
    "val_ratio = 0.2  # This is the ratio of validation set within the training set\n",
    "\n",
    "# Set a random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "# Split molecule IDs into train and test sets\n",
    "train_mol_ids, test_mol_ids = train_test_split(list(conformers_by_mol_id.keys()), test_size=test_ratio, random_state=42)\n",
    "\n",
    "####\n",
    "test_data = [data for mol_id in test_mol_ids for data in conformers_by_mol_id[mol_id]]\n",
    "\n",
    "# Define a custom collate function for the DataLoader\n",
    "def collate_fn(data_list):\n",
    "    batch = Batch.from_data_list(data_list)\n",
    "    mol_ids = torch.cat([data.mol_id for data in data_list], dim=0)  # Concatenate mol_id tensors\n",
    "    batch.mol_id = mol_ids\n",
    "    return batch\n",
    "\n",
    "batch_size = 32\n",
    "\n",
    "test_loader = GeoDataLoader(test_data, batch_size=batch_size, shuffle=False, collate_fn=collate_fn)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4679eda5",
   "metadata": {},
   "source": [
    "## TRAINING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "11f52198",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_model(data_loader, model, device):\n",
    "    model.eval()\n",
    "    predictions = []\n",
    "    mol_ids = []\n",
    "    true_values = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in data_loader:\n",
    "            data = data.to(device)\n",
    "            outputs = model(data.x, data.pos, data.batch)\n",
    "            predictions.extend(outputs.cpu().numpy())\n",
    "            mol_ids.extend(data.mol_id.cpu().numpy())\n",
    "            true_values.extend(data.y.cpu().numpy())\n",
    "\n",
    "    # Aggregate predictions by averaging for each molecule ID\n",
    "    aggregated_predictions = aggregate_predictions(predictions, mol_ids)\n",
    "\n",
    "    # Calculate the total absolute error using aggregated predictions\n",
    "    total_abs_error = 0\n",
    "    for mol_id, true_value in zip(mol_ids, true_values):\n",
    "        total_abs_error += abs(aggregated_predictions[mol_id] - true_value)\n",
    "\n",
    "    return total_abs_error / len(true_values)\n",
    "\n",
    "def aggregate_predictions(predictions, mol_ids):\n",
    "    aggregated_predictions = defaultdict(list)\n",
    "    # Collect predictions for each molecule ID\n",
    "    for mol_id, prediction in zip(mol_ids, predictions):\n",
    "        aggregated_predictions[mol_id].append(prediction)\n",
    "    \n",
    "    # Aggregate predictions by averaging\n",
    "    aggregated_predictions = {mol_id: sum(preds)/len(preds) for mol_id, preds in aggregated_predictions.items()}\n",
    "    return aggregated_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7339b909",
   "metadata": {},
   "outputs": [],
   "source": [
    "# def train_one_epoch(epoch_index, tb_writer, training_loader):\n",
    "def train_one_epoch(epoch_index, training_loader):\n",
    "\n",
    "    running_loss = 0.\n",
    "    last_loss = 0.\n",
    "    batches_since_last_printout = 0.\n",
    "    for i, data in enumerate(training_loader):\n",
    "        data = data.to(device)\n",
    "        optimizer.zero_grad()\n",
    "            \n",
    "        # Make predictions for this batch\n",
    "        outputs = model(data.x, data.pos, data.batch)\n",
    "\n",
    "        # Compute the loss and its gradients\n",
    "        loss = loss_func(outputs, data.y)        \n",
    "        loss.backward()\n",
    "\n",
    "        # Adjust learning weights\n",
    "        optimizer.step()\n",
    "            \n",
    "        # Gather data and report\n",
    "        running_loss += loss.item()\n",
    "        batches_since_last_printout += 1\n",
    "\n",
    "        n_training_batches = len(training_loader)\n",
    "        if i % 50 == 49 or i + 1 == n_training_batches:  # Check for every 50th batch or the last batch\n",
    "            last_loss = running_loss / batches_since_last_printout  # Use the actual number of batches since the last printout\n",
    "            running_loss = 0.\n",
    "            batches_since_last_printout = 0  # Reset the counter\n",
    "\n",
    "    return last_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "854b4e14",
   "metadata": {},
   "outputs": [],
   "source": [
    "def kfold_CV(i, total_combinations, train_mol_ids, n_folds, n_epochs, model, device, batch_size):\n",
    "    kf = KFold(n_splits=n_folds, shuffle=True, random_state=42)\n",
    "    train_mae_list = []\n",
    "    val_mae_list = []\n",
    "    \n",
    "    for fold, (train_mol_indices, val_mol_indices) in enumerate(kf.split(train_mol_ids)):\n",
    "        print(f' *Fold {fold + 1}/{n_folds}')\n",
    "        best_vmae = 1_000_000.\n",
    "        best_tmae = 0    \n",
    "        \n",
    "        # Get the molecule IDs for the training and validation sets\n",
    "        train_mol_ids_fold = [train_mol_ids[i] for i in train_mol_indices]\n",
    "        val_mol_ids_fold = [train_mol_ids[i] for i in val_mol_indices]\n",
    "\n",
    "        # Gather the corresponding conformers for the training and validation sets\n",
    "        train_dataset = [data for mol_id in train_mol_ids_fold for data in conformers_by_mol_id[mol_id]]\n",
    "        val_dataset = [data for mol_id in val_mol_ids_fold for data in conformers_by_mol_id[mol_id]]\n",
    "\n",
    "        # Create data loaders for training and validation sets\n",
    "        training_loader = GeoDataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "        validation_loader = GeoDataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "        # Train the model for the current fold\n",
    "        for epoch in range(n_epochs):\n",
    "            model.train(True)\n",
    "            avg_loss = train_one_epoch(epoch, training_loader)\n",
    "\n",
    "            # Evaluate the model on the training and validation sets\n",
    "            mae_train = evaluate_model(training_loader, model, device)\n",
    "            mae_val = evaluate_model(validation_loader, model, device)\n",
    "\n",
    "            if epoch % 10 == 9:\n",
    "                print(f'   EPOCH {epoch + 1}/{n_epochs}, Fold {fold + 1}/{n_folds}:, Combination {i}/{total_combinations}')\n",
    "                print(f'   MAE train: {mae_train:.3f}; MAE validation {mae_val:.3f}')\n",
    "\n",
    "            # Track best performance, and save the model's state\n",
    "            if mae_val < best_vmae:\n",
    "                best_vmae = mae_val\n",
    "                best_tmae = mae_train\n",
    "\n",
    "        print(f\"  @Best MAE train: {best_tmae:.3f}, validation: {best_vmae:.3f}\")\n",
    "\n",
    "        # Save the best MAE for each fold\n",
    "        train_mae_list.append(best_tmae)\n",
    "        val_mae_list.append(best_vmae)\n",
    "\n",
    "    # Calculate the average MAE across all folds\n",
    "    avg_train_mae = np.mean(train_mae_list)\n",
    "    avg_val_mae = np.mean(val_mae_list)\n",
    "\n",
    "    return avg_train_mae, avg_val_mae"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0d6172c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Define the filename for the output file\n",
    "# output_filename_all = \"hyperparameters_mae_10conf.txt\"\n",
    "\n",
    "# # # Write the header to the file\n",
    "# # with open(output_filename_all, \"w\") as file:\n",
    "# #     file.write(\"embedding_dim, num_rbf, cutoff, num_interactions, train_mae, test_mae\\n\")\n",
    "\n",
    "# ########################################################\n",
    "# embedding_dims = [8, 16] \n",
    "# num_rbfs = [8, 16, 32] \n",
    "# cutoffs = [5]\n",
    "# num_interactions_list = [5, 10]\n",
    "\n",
    "# total_combinations = len(embedding_dims) * len(num_rbfs) * len(cutoffs) * len(num_interactions_list)\n",
    "# ########################################################\n",
    "\n",
    "# # Iterate over all combinations\n",
    "# for i, (embedding_dim, num_rbf, cutoff, num_interactions) in enumerate(itertools.product(embedding_dims, num_rbfs, cutoffs, num_interactions_list), start=1):\n",
    "#     print('-' * 40)\n",
    "#     print(f'Combination {i} of {total_combinations}: embedding_dim={embedding_dim}, num_rbf={num_rbf}, cutoff={cutoff}, num_interactions={num_interactions}')\n",
    "\n",
    "#     # Initialize the model with the current hyperparameters\n",
    "#     total_embedding_dim = (embedding_dim // 2) + (embedding_dim // 4) + (embedding_dim // 4) + 7\n",
    "#     model = SchNetModified(embedding_dim, num_rbf, cutoff, total_embedding_dim, num_interactions)\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-5)\n",
    "#     loss_func = torch.nn.L1Loss() #MAE\n",
    "#     device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "#     model.to(device)\n",
    "    \n",
    "#     ##\n",
    "#     n_epochs = 100\n",
    "#     n_folds = 3\n",
    "#     avg_train_mae, avg_val_mae = kfold_CV(i, total_combinations, train_mol_ids, n_folds, n_epochs, model, device, batch_size)\n",
    "#     ##    \n",
    "        \n",
    "#     ##\n",
    "#     with open(output_filename_all, \"a\") as file:\n",
    "#         file.write(f\"print(f'Combination {i} of {total_combinations}; \")\n",
    "#         file.write(f\"{embedding_dim}, {num_rbf}, {cutoff}, {num_interactions}, {avg_train_mae:.3f}, {avg_val_mae:.3f}\\n\")  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f3c1419",
   "metadata": {},
   "source": [
    "# FINAL TRAINING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fc404e27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ready\n"
     ]
    }
   ],
   "source": [
    "print(\"ready\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d5a111e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SchNetModified(\n",
       "  (atom_embedding): AtomEmbedding(\n",
       "    (atomic_num_embedding): Embedding(100, 32)\n",
       "    (is_in_ring_embedding): Embedding(2, 16)\n",
       "    (is_aromatic_embedding): Embedding(2, 16)\n",
       "  )\n",
       "  (rbf_expansion): RBFExpansion()\n",
       "  (interactions): ModuleList(\n",
       "    (0-4): 5 x NNConv(71, 71, aggr=mean, nn=Linear(in_features=64, out_features=5041, bias=True))\n",
       "  )\n",
       "  (lin): Linear(in_features=71, out_features=1, bias=True)\n",
       "  (dropout): Dropout(p=0.2, inplace=False)\n",
       ")"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "########################################################\n",
    "embedding_dim = 64\n",
    "num_rbf = 64\n",
    "cutoff = 5\n",
    "num_interactions = 5\n",
    "n_epochs = 2000\n",
    "batch_size = 32\n",
    "########################################################\n",
    "# Initialize the model with the current hyperparameters\n",
    "total_embedding_dim = (embedding_dim // 2) + (embedding_dim // 4) + (embedding_dim // 4) + 7\n",
    "model = SchNetModified(embedding_dim, num_rbf, cutoff, total_embedding_dim, num_interactions)\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-5)\n",
    "loss_func = torch.nn.L1Loss() #MAE\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ba90018e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_model_training(data_loader, model, device):\n",
    "    model.eval()\n",
    "    predictions = []\n",
    "    mol_ids = []\n",
    "    true_values = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in data_loader:\n",
    "            data = data.to(device)\n",
    "            outputs = model(data.x, data.pos, data.batch)\n",
    "            predictions.extend(outputs.cpu().numpy())\n",
    "            mol_ids.extend(data.mol_id.cpu().numpy())\n",
    "            true_values.extend(data.y.cpu().numpy())\n",
    "\n",
    "    # Aggregate predictions by averaging for each molecule ID\n",
    "    aggregated_predictions = aggregate_predictions(predictions, mol_ids)\n",
    "\n",
    "    # Calculate the total absolute error using aggregated predictions\n",
    "    total_abs_error = 0\n",
    "    for mol_id, true_value in zip(mol_ids, true_values):\n",
    "        total_abs_error += abs(aggregated_predictions[mol_id] - true_value)\n",
    "\n",
    "    return total_abs_error / len(true_values)\n",
    "\n",
    "def aggregate_predictions(predictions, mol_ids):\n",
    "    aggregated_predictions = defaultdict(list)\n",
    "    # Collect predictions for each molecule ID\n",
    "    for mol_id, prediction in zip(mol_ids, predictions):\n",
    "        aggregated_predictions[mol_id].append(prediction)\n",
    "    \n",
    "    # Aggregate predictions by averaging\n",
    "    aggregated_predictions = {mol_id: sum(preds)/len(preds) for mol_id, preds in aggregated_predictions.items()}\n",
    "    return aggregated_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5b631ea2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.optim as optim\n",
    "from torch.optim.lr_scheduler import ReduceLROnPlateau\n",
    "\n",
    "scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=10, verbose=True)\n",
    "\n",
    "def train_one_epoch_final(epoch_index, training_loader):\n",
    "    running_loss = 0.\n",
    "    last_loss = 0.\n",
    "    batches_since_last_printout = 0.\n",
    "    for i, data in enumerate(training_loader):\n",
    "        data = data.to(device)\n",
    "        optimizer.zero_grad()\n",
    "            \n",
    "        # Make predictions for this batch\n",
    "        outputs = model(data.x, data.pos, data.batch)\n",
    "\n",
    "        # Compute the loss and its gradients\n",
    "        loss = loss_func(outputs, data.y)        \n",
    "        loss.backward()\n",
    "\n",
    "        # Adjust learning weights\n",
    "        optimizer.step()\n",
    "            \n",
    "        # Gather data and report\n",
    "        running_loss += loss.item()\n",
    "        batches_since_last_printout += 1\n",
    "        \n",
    "        n_training_batches = len(training_loader)\n",
    "        if i % 50 == 49 or i + 1 == n_training_batches:  # Check for every 50th batch or the last batch\n",
    "            last_loss = running_loss / batches_since_last_printout  # Use the actual number of batches since the last printout\n",
    "            running_loss = 0.\n",
    "            batches_since_last_printout = 0  # Reset the counter\n",
    "\n",
    "    # Update the learning rate based on the average loss of the epoch\n",
    "    scheduler.step(last_loss)\n",
    "\n",
    "    return last_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6b24894f",
   "metadata": {},
   "outputs": [],
   "source": [
    "output_filename_training = \"3DGNN_10conf_training_6464_2000.txt\"\n",
    "\n",
    "# # Write the header to the file\n",
    "# with open(output_filename_training, \"w\") as file:\n",
    "#     file.write(\"EPOCH, Adjusted MAE, MAE Train, MAE Test, Best MAE Test, epochs_since_improvement\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8d9f33f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Further split train molecule IDs into train and validation sets\n",
    "train_mol_ids, val_mol_ids = train_test_split(train_mol_ids, test_size=val_ratio, random_state=42)\n",
    "\n",
    "# Collect conformers for each split based on molecule IDs\n",
    "train_data = [data for mol_id in train_mol_ids for data in conformers_by_mol_id[mol_id]]\n",
    "val_data = [data for mol_id in val_mol_ids for data in conformers_by_mol_id[mol_id]]\n",
    "\n",
    "# Create the train, validation, and test loaders\n",
    "training_loader = GeoDataLoader(train_data, batch_size=batch_size, shuffle=True, collate_fn=collate_fn)\n",
    "val_loader = GeoDataLoader(val_data, batch_size=batch_size, shuffle=False, collate_fn=collate_fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7c90cae9",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################################\n",
    "embedding_dim = 64\n",
    "num_rbf = 64\n",
    "cutoff = 5\n",
    "num_interactions = 5\n",
    "total_embedding_dim = (embedding_dim // 2) + (embedding_dim // 4) + (embedding_dim // 4) + 7\n",
    "n_epochs = 2000\n",
    "########################################################\n",
    "early_stop_patience = 2000\n",
    "########################################################\n",
    "model = SchNetModified(embedding_dim, num_rbf, cutoff, total_embedding_dim, num_interactions)\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-5)\n",
    "loss_func = torch.nn.L1Loss() #MAE\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "model.to(device)\n",
    "########################################################\n",
    "best_testmae = 1_000_000.\n",
    "best_trainmae = 1_000_000.\n",
    "best_adjusted_mae = 1_000_000.\n",
    "epochs_since_improvement = 0\n",
    "##\n",
    "overfit_penalty_factor = 0.3  # Adjust this value as needed\n",
    "relative_difference_threshold = 0.2  # Define a threshold for acceptable relative difference\n",
    "\n",
    "# for epoch in range(n_epochs):\n",
    "#     model.train(True)\n",
    "#     avg_loss = train_one_epoch(epoch, training_loader)\n",
    "\n",
    "#     # Evaluate the model on the training and validation sets\n",
    "#     mae_train = evaluate_model_training(training_loader, model, device)\n",
    "#     mae_test = evaluate_model_training(val_loader, model, device)\n",
    "    \n",
    "#     overfit_penalty_factor = 0.3  # Adjust this value as needed\n",
    "#     relative_difference_threshold = 0.2  # Define a threshold for acceptable relative difference\n",
    "\n",
    "#     # Calculate the relative difference between test and train MAE\n",
    "#     relative_difference = (mae_test - mae_train) / mae_train\n",
    "\n",
    "#     # Apply a penalty if the relative difference exceeds the threshold\n",
    "#     if relative_difference > relative_difference_threshold:\n",
    "#         overfit_penalty = (relative_difference - relative_difference_threshold) * overfit_penalty_factor\n",
    "#     else:\n",
    "#         overfit_penalty = 0\n",
    "\n",
    "#     adjusted_mae = mae_train + overfit_penalty\n",
    "\n",
    "#     # Track best performance, and save the model's state\n",
    "#     if adjusted_mae < best_adjusted_mae:\n",
    "#         best_adjusted_mae = adjusted_mae\n",
    "#         best_testmae = mae_test\n",
    "#         best_trainmae = mae_train\n",
    "#         torch.save(model.state_dict(), 'best_model_3DGNN_10conf_6464_2000.pth')  # Save the model state\n",
    "#         epochs_since_improvement = 0 \n",
    "#     else:\n",
    "#         epochs_since_improvement += 1\n",
    "\n",
    "#     if epoch % 2 == 1:\n",
    "#         print(f'   EPOCH {epoch + 1}/{n_epochs}')\n",
    "#         print(f'   Adjusted MAE: {adjusted_mae:.3f}; MAE train: {mae_train:.3f}; MAE test: {mae_test:.3f}; Epochs Since Improvement: {epochs_since_improvement}')\n",
    "\n",
    "#     if epochs_since_improvement >= early_stop_patience:\n",
    "#         print(f\"No improvement in MAE for {early_stop_patience} epochs. Stopping training.\")\n",
    "#         break\n",
    "        \n",
    "#     with open(output_filename_training, \"a\") as file:\n",
    "#         file.write(f\"EPOCH: {epoch}; Adjusted MAE: {adjusted_mae:.3f}; MAE Train: {mae_train:.3f}; MAE Test: {mae_test:.3f}; Best MAE Test: {best_testmae:.3f}; epochs_since_improvement: {epochs_since_improvement}\\n\")      \n",
    "    \n",
    "#     torch.save({\n",
    "#     'epoch': epoch,\n",
    "#     'model_state_dict': model.state_dict(),\n",
    "#     'optimizer_state_dict': optimizer.state_dict(),\n",
    "#     'best_testmae': best_testmae,\n",
    "#     'best_trainmae': best_trainmae,\n",
    "#     'best_adjusted_mae': best_adjusted_mae,\n",
    "#     'epochs_since_improvement': epochs_since_improvement,\n",
    "#     }, 'checkpoint_6464_2000.pth')\n",
    "\n",
    "#     torch.cuda.empty_cache()\n",
    "    \n",
    "# print(f\"@Best MAE train: {best_testmae:.3f}\")        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "01993bfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "checkpoint = torch.load('checkpoint_6464_2000.pth')\n",
    "model.load_state_dict(checkpoint['model_state_dict'])\n",
    "optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
    "epoch = checkpoint['epoch']\n",
    "best_testmae = checkpoint['best_testmae']\n",
    "best_trainmae = checkpoint['best_trainmae']\n",
    "best_adjusted_mae = checkpoint['best_adjusted_mae']\n",
    "epochs_since_improvement = checkpoint['epochs_since_improvement']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f98ef51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   EPOCH 1428/2000\n",
      "   Adjusted MAE: 0.376; MAE train: 0.167; MAE test: 0.316; Epochs Since Improvement: 221\n",
      "   EPOCH 1430/2000\n",
      "   Adjusted MAE: 0.373; MAE train: 0.179; MAE test: 0.331; Epochs Since Improvement: 223\n",
      "   EPOCH 1432/2000\n",
      "   Adjusted MAE: 0.360; MAE train: 0.194; MAE test: 0.340; Epochs Since Improvement: 225\n",
      "   EPOCH 1434/2000\n",
      "   Adjusted MAE: 0.389; MAE train: 0.172; MAE test: 0.331; Epochs Since Improvement: 227\n",
      "   EPOCH 1436/2000\n",
      "   Adjusted MAE: 0.332; MAE train: 0.247; MAE test: 0.366; Epochs Since Improvement: 229\n",
      "   EPOCH 1438/2000\n",
      "   Adjusted MAE: 0.340; MAE train: 0.220; MAE test: 0.352; Epochs Since Improvement: 231\n",
      "   EPOCH 1440/2000\n",
      "   Adjusted MAE: 0.362; MAE train: 0.184; MAE test: 0.330; Epochs Since Improvement: 233\n",
      "   EPOCH 1442/2000\n",
      "   Adjusted MAE: 0.370; MAE train: 0.174; MAE test: 0.322; Epochs Since Improvement: 235\n",
      "   EPOCH 1444/2000\n",
      "   Adjusted MAE: 0.339; MAE train: 0.198; MAE test: 0.331; Epochs Since Improvement: 237\n",
      "   EPOCH 1446/2000\n",
      "   Adjusted MAE: 0.342; MAE train: 0.218; MAE test: 0.352; Epochs Since Improvement: 239\n",
      "   EPOCH 1448/2000\n",
      "   Adjusted MAE: 0.322; MAE train: 0.215; MAE test: 0.335; Epochs Since Improvement: 241\n",
      "   EPOCH 1450/2000\n",
      "   Adjusted MAE: 0.368; MAE train: 0.174; MAE test: 0.322; Epochs Since Improvement: 243\n",
      "   EPOCH 1452/2000\n",
      "   Adjusted MAE: 0.365; MAE train: 0.171; MAE test: 0.315; Epochs Since Improvement: 245\n",
      "   EPOCH 1454/2000\n",
      "   Adjusted MAE: 0.358; MAE train: 0.197; MAE test: 0.342; Epochs Since Improvement: 247\n",
      "   EPOCH 1456/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.193; MAE test: 0.331; Epochs Since Improvement: 249\n",
      "   EPOCH 1458/2000\n",
      "   Adjusted MAE: 0.343; MAE train: 0.193; MAE test: 0.328; Epochs Since Improvement: 251\n",
      "   EPOCH 1460/2000\n",
      "   Adjusted MAE: 0.339; MAE train: 0.208; MAE test: 0.341; Epochs Since Improvement: 253\n",
      "   EPOCH 1462/2000\n",
      "   Adjusted MAE: 0.373; MAE train: 0.176; MAE test: 0.327; Epochs Since Improvement: 255\n",
      "   EPOCH 1464/2000\n",
      "   Adjusted MAE: 0.390; MAE train: 0.183; MAE test: 0.347; Epochs Since Improvement: 257\n",
      "   EPOCH 1466/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.197; MAE test: 0.339; Epochs Since Improvement: 259\n",
      "   EPOCH 1468/2000\n",
      "   Adjusted MAE: 0.340; MAE train: 0.196; MAE test: 0.329; Epochs Since Improvement: 261\n",
      "   EPOCH 1470/2000\n",
      "   Adjusted MAE: 0.364; MAE train: 0.183; MAE test: 0.330; Epochs Since Improvement: 263\n",
      "   EPOCH 1472/2000\n",
      "   Adjusted MAE: 0.364; MAE train: 0.182; MAE test: 0.329; Epochs Since Improvement: 265\n",
      "   EPOCH 1474/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.283; MAE test: 0.401; Epochs Since Improvement: 267\n",
      "   EPOCH 1476/2000\n",
      "   Adjusted MAE: 0.358; MAE train: 0.189; MAE test: 0.334; Epochs Since Improvement: 269\n",
      "   EPOCH 1478/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.196; MAE test: 0.338; Epochs Since Improvement: 271\n",
      "   EPOCH 1480/2000\n",
      "   Adjusted MAE: 0.350; MAE train: 0.187; MAE test: 0.326; Epochs Since Improvement: 273\n",
      "   EPOCH 1482/2000\n",
      "   Adjusted MAE: 0.358; MAE train: 0.180; MAE test: 0.323; Epochs Since Improvement: 275\n",
      "   EPOCH 1484/2000\n",
      "   Adjusted MAE: 0.351; MAE train: 0.184; MAE test: 0.323; Epochs Since Improvement: 277\n",
      "   EPOCH 1486/2000\n",
      "   Adjusted MAE: 0.347; MAE train: 0.206; MAE test: 0.344; Epochs Since Improvement: 279\n",
      "   EPOCH 1488/2000\n",
      "   Adjusted MAE: 0.369; MAE train: 0.172; MAE test: 0.320; Epochs Since Improvement: 281\n",
      "   EPOCH 1490/2000\n",
      "   Adjusted MAE: 0.364; MAE train: 0.195; MAE test: 0.344; Epochs Since Improvement: 283\n",
      "   EPOCH 1492/2000\n",
      "   Adjusted MAE: 0.331; MAE train: 0.204; MAE test: 0.331; Epochs Since Improvement: 285\n",
      "   EPOCH 1494/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.183; MAE test: 0.324; Epochs Since Improvement: 287\n",
      "   EPOCH 1496/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.214; MAE test: 0.352; Epochs Since Improvement: 289\n",
      "   EPOCH 1498/2000\n",
      "   Adjusted MAE: 0.373; MAE train: 0.373; MAE test: 0.445; Epochs Since Improvement: 291\n",
      "   EPOCH 1500/2000\n",
      "   Adjusted MAE: 0.351; MAE train: 0.195; MAE test: 0.335; Epochs Since Improvement: 293\n",
      "   EPOCH 1502/2000\n",
      "   Adjusted MAE: 0.333; MAE train: 0.221; MAE test: 0.348; Epochs Since Improvement: 295\n",
      "   EPOCH 1504/2000\n",
      "   Adjusted MAE: 0.336; MAE train: 0.189; MAE test: 0.319; Epochs Since Improvement: 297\n",
      "   EPOCH 1506/2000\n",
      "   Adjusted MAE: 0.364; MAE train: 0.182; MAE test: 0.329; Epochs Since Improvement: 299\n",
      "   EPOCH 1508/2000\n",
      "   Adjusted MAE: 0.358; MAE train: 0.178; MAE test: 0.321; Epochs Since Improvement: 301\n",
      "   EPOCH 1510/2000\n",
      "   Adjusted MAE: 0.339; MAE train: 0.193; MAE test: 0.326; Epochs Since Improvement: 303\n",
      "   EPOCH 1512/2000\n",
      "   Adjusted MAE: 0.325; MAE train: 0.223; MAE test: 0.343; Epochs Since Improvement: 305\n",
      "   EPOCH 1514/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.201; MAE test: 0.344; Epochs Since Improvement: 307\n",
      "   EPOCH 1516/2000\n",
      "   Adjusted MAE: 0.335; MAE train: 0.284; MAE test: 0.389; Epochs Since Improvement: 309\n",
      "   EPOCH 1518/2000\n",
      "   Adjusted MAE: 0.357; MAE train: 0.197; MAE test: 0.342; Epochs Since Improvement: 311\n",
      "   EPOCH 1520/2000\n",
      "   Adjusted MAE: 0.361; MAE train: 0.170; MAE test: 0.313; Epochs Since Improvement: 313\n",
      "   EPOCH 1522/2000\n",
      "   Adjusted MAE: 0.355; MAE train: 0.198; MAE test: 0.341; Epochs Since Improvement: 315\n",
      "   EPOCH 1524/2000\n",
      "   Adjusted MAE: 0.339; MAE train: 0.260; MAE test: 0.380; Epochs Since Improvement: 317\n",
      "   EPOCH 1526/2000\n",
      "   Adjusted MAE: 0.327; MAE train: 0.242; MAE test: 0.360; Epochs Since Improvement: 319\n",
      "   EPOCH 1528/2000\n",
      "   Adjusted MAE: 0.353; MAE train: 0.207; MAE test: 0.349; Epochs Since Improvement: 321\n",
      "   EPOCH 1530/2000\n",
      "   Adjusted MAE: 0.342; MAE train: 0.218; MAE test: 0.352; Epochs Since Improvement: 323\n",
      "   EPOCH 1532/2000\n",
      "   Adjusted MAE: 0.351; MAE train: 0.231; MAE test: 0.370; Epochs Since Improvement: 325\n",
      "   EPOCH 1534/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.184; MAE test: 0.325; Epochs Since Improvement: 327\n",
      "   EPOCH 1536/2000\n",
      "   Adjusted MAE: 0.365; MAE train: 0.187; MAE test: 0.335; Epochs Since Improvement: 329\n",
      "   EPOCH 1538/2000\n",
      "   Adjusted MAE: 0.345; MAE train: 0.221; MAE test: 0.357; Epochs Since Improvement: 331\n",
      "   EPOCH 1540/2000\n",
      "   Adjusted MAE: 0.353; MAE train: 0.187; MAE test: 0.328; Epochs Since Improvement: 333\n",
      "   EPOCH 1542/2000\n",
      "   Adjusted MAE: 0.363; MAE train: 0.189; MAE test: 0.336; Epochs Since Improvement: 335\n",
      "   EPOCH 1544/2000\n",
      "   Adjusted MAE: 0.356; MAE train: 0.196; MAE test: 0.340; Epochs Since Improvement: 337\n",
      "   EPOCH 1546/2000\n",
      "   Adjusted MAE: 0.314; MAE train: 0.230; MAE test: 0.340; Epochs Since Improvement: 339\n",
      "   EPOCH 1548/2000\n",
      "   Adjusted MAE: 0.345; MAE train: 0.271; MAE test: 0.392; Epochs Since Improvement: 341\n",
      "   EPOCH 1550/2000\n",
      "   Adjusted MAE: 0.368; MAE train: 0.184; MAE test: 0.334; Epochs Since Improvement: 343\n",
      "   EPOCH 1552/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.182; MAE test: 0.322; Epochs Since Improvement: 345\n",
      "   EPOCH 1554/2000\n",
      "   Adjusted MAE: 0.314; MAE train: 0.232; MAE test: 0.342; Epochs Since Improvement: 347\n",
      "   EPOCH 1556/2000\n",
      "   Adjusted MAE: 0.318; MAE train: 0.269; MAE test: 0.367; Epochs Since Improvement: 349\n",
      "   EPOCH 1558/2000\n",
      "   Adjusted MAE: 0.332; MAE train: 0.224; MAE test: 0.349; Epochs Since Improvement: 351\n",
      "   EPOCH 1560/2000\n",
      "   Adjusted MAE: 0.338; MAE train: 0.203; MAE test: 0.335; Epochs Since Improvement: 353\n",
      "   EPOCH 1562/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.190; MAE test: 0.332; Epochs Since Improvement: 355\n",
      "   EPOCH 1564/2000\n",
      "   Adjusted MAE: 0.368; MAE train: 0.183; MAE test: 0.333; Epochs Since Improvement: 357\n",
      "   EPOCH 1566/2000\n",
      "   Adjusted MAE: 0.366; MAE train: 0.178; MAE test: 0.325; Epochs Since Improvement: 359\n",
      "   EPOCH 1568/2000\n",
      "   Adjusted MAE: 0.336; MAE train: 0.271; MAE test: 0.383; Epochs Since Improvement: 361\n",
      "   EPOCH 1570/2000\n",
      "   Adjusted MAE: 0.367; MAE train: 0.180; MAE test: 0.328; Epochs Since Improvement: 363\n",
      "   EPOCH 1572/2000\n",
      "   Adjusted MAE: 0.347; MAE train: 0.214; MAE test: 0.351; Epochs Since Improvement: 365\n",
      "   EPOCH 1574/2000\n",
      "   Adjusted MAE: 0.346; MAE train: 0.192; MAE test: 0.328; Epochs Since Improvement: 367\n",
      "   EPOCH 1576/2000\n",
      "   Adjusted MAE: 0.316; MAE train: 0.270; MAE test: 0.365; Epochs Since Improvement: 369\n",
      "   EPOCH 1578/2000\n",
      "   Adjusted MAE: 0.385; MAE train: 0.163; MAE test: 0.317; Epochs Since Improvement: 371\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   EPOCH 1580/2000\n",
      "   Adjusted MAE: 0.352; MAE train: 0.189; MAE test: 0.330; Epochs Since Improvement: 373\n",
      "   EPOCH 1582/2000\n",
      "   Adjusted MAE: 0.355; MAE train: 0.172; MAE test: 0.311; Epochs Since Improvement: 375\n",
      "   EPOCH 1584/2000\n",
      "   Adjusted MAE: 0.345; MAE train: 0.198; MAE test: 0.334; Epochs Since Improvement: 377\n",
      "   EPOCH 1586/2000\n",
      "   Adjusted MAE: 0.345; MAE train: 0.224; MAE test: 0.359; Epochs Since Improvement: 379\n",
      "   EPOCH 1588/2000\n",
      "   Adjusted MAE: 0.346; MAE train: 0.204; MAE test: 0.341; Epochs Since Improvement: 381\n",
      "   EPOCH 1590/2000\n",
      "   Adjusted MAE: 0.342; MAE train: 0.236; MAE test: 0.366; Epochs Since Improvement: 383\n",
      "   EPOCH 1592/2000\n",
      "   Adjusted MAE: 0.345; MAE train: 0.189; MAE test: 0.325; Epochs Since Improvement: 385\n",
      "   EPOCH 1594/2000\n",
      "   Adjusted MAE: 0.356; MAE train: 0.187; MAE test: 0.329; Epochs Since Improvement: 387\n",
      "   EPOCH 1596/2000\n",
      "   Adjusted MAE: 0.347; MAE train: 0.270; MAE test: 0.393; Epochs Since Improvement: 389\n",
      "   EPOCH 1598/2000\n",
      "   Adjusted MAE: 0.353; MAE train: 0.184; MAE test: 0.325; Epochs Since Improvement: 391\n",
      "   EPOCH 1600/2000\n",
      "   Adjusted MAE: 0.355; MAE train: 0.180; MAE test: 0.321; Epochs Since Improvement: 393\n",
      "   EPOCH 1602/2000\n",
      "   Adjusted MAE: 0.367; MAE train: 0.318; MAE test: 0.434; Epochs Since Improvement: 395\n",
      "   EPOCH 1604/2000\n",
      "   Adjusted MAE: 0.368; MAE train: 0.180; MAE test: 0.329; Epochs Since Improvement: 397\n",
      "   EPOCH 1606/2000\n",
      "   Adjusted MAE: 0.352; MAE train: 0.193; MAE test: 0.334; Epochs Since Improvement: 399\n",
      "   EPOCH 1608/2000\n",
      "   Adjusted MAE: 0.324; MAE train: 0.193; MAE test: 0.316; Epochs Since Improvement: 401\n",
      "   EPOCH 1610/2000\n",
      "   Adjusted MAE: 0.318; MAE train: 0.258; MAE test: 0.362; Epochs Since Improvement: 403\n",
      "   EPOCH 1612/2000\n",
      "   Adjusted MAE: 0.361; MAE train: 0.188; MAE test: 0.334; Epochs Since Improvement: 405\n",
      "   EPOCH 1614/2000\n",
      "   Adjusted MAE: 0.364; MAE train: 0.189; MAE test: 0.338; Epochs Since Improvement: 407\n",
      "   EPOCH 1616/2000\n",
      "   Adjusted MAE: 0.334; MAE train: 0.199; MAE test: 0.329; Epochs Since Improvement: 409\n",
      "   EPOCH 1618/2000\n",
      "   Adjusted MAE: 0.310; MAE train: 0.239; MAE test: 0.343; Epochs Since Improvement: 411\n",
      "   EPOCH 1620/2000\n",
      "   Adjusted MAE: 0.360; MAE train: 0.199; MAE test: 0.346; Epochs Since Improvement: 413\n",
      "   EPOCH 1622/2000\n",
      "   Adjusted MAE: 0.351; MAE train: 0.199; MAE test: 0.339; Epochs Since Improvement: 415\n",
      "   EPOCH 1624/2000\n",
      "   Adjusted MAE: 0.380; MAE train: 0.172; MAE test: 0.325; Epochs Since Improvement: 417\n",
      "   EPOCH 1626/2000\n",
      "   Adjusted MAE: 0.333; MAE train: 0.230; MAE test: 0.354; Epochs Since Improvement: 419\n",
      "   EPOCH 1628/2000\n",
      "   Adjusted MAE: 0.301; MAE train: 0.260; MAE test: 0.348; Epochs Since Improvement: 0\n",
      "   EPOCH 1630/2000\n",
      "   Adjusted MAE: 0.365; MAE train: 0.175; MAE test: 0.321; Epochs Since Improvement: 2\n",
      "   EPOCH 1632/2000\n",
      "   Adjusted MAE: 0.334; MAE train: 0.280; MAE test: 0.387; Epochs Since Improvement: 4\n",
      "   EPOCH 1634/2000\n",
      "   Adjusted MAE: 0.317; MAE train: 0.226; MAE test: 0.340; Epochs Since Improvement: 6\n",
      "   EPOCH 1636/2000\n",
      "   Adjusted MAE: 0.368; MAE train: 0.169; MAE test: 0.316; Epochs Since Improvement: 8\n",
      "   EPOCH 1638/2000\n",
      "   Adjusted MAE: 0.355; MAE train: 0.176; MAE test: 0.316; Epochs Since Improvement: 10\n",
      "   EPOCH 1640/2000\n",
      "   Adjusted MAE: 0.363; MAE train: 0.192; MAE test: 0.340; Epochs Since Improvement: 12\n",
      "   EPOCH 1642/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.291; MAE test: 0.405; Epochs Since Improvement: 14\n",
      "   EPOCH 1644/2000\n",
      "   Adjusted MAE: 0.345; MAE train: 0.248; MAE test: 0.378; Epochs Since Improvement: 16\n",
      "   EPOCH 1646/2000\n",
      "   Adjusted MAE: 0.337; MAE train: 0.189; MAE test: 0.320; Epochs Since Improvement: 18\n",
      "   EPOCH 1648/2000\n",
      "   Adjusted MAE: 0.331; MAE train: 0.215; MAE test: 0.340; Epochs Since Improvement: 20\n",
      "   EPOCH 1650/2000\n",
      "   Adjusted MAE: 0.359; MAE train: 0.180; MAE test: 0.324; Epochs Since Improvement: 22\n",
      "   EPOCH 1652/2000\n",
      "   Adjusted MAE: 0.328; MAE train: 0.230; MAE test: 0.351; Epochs Since Improvement: 24\n",
      "   EPOCH 1654/2000\n",
      "   Adjusted MAE: 0.330; MAE train: 0.221; MAE test: 0.345; Epochs Since Improvement: 26\n",
      "   EPOCH 1656/2000\n",
      "   Adjusted MAE: 0.320; MAE train: 0.235; MAE test: 0.348; Epochs Since Improvement: 28\n",
      "   EPOCH 1658/2000\n",
      "   Adjusted MAE: 0.349; MAE train: 0.177; MAE test: 0.314; Epochs Since Improvement: 30\n",
      "   EPOCH 1660/2000\n",
      "   Adjusted MAE: 0.343; MAE train: 0.210; MAE test: 0.345; Epochs Since Improvement: 32\n",
      "   EPOCH 1662/2000\n",
      "   Adjusted MAE: 0.350; MAE train: 0.191; MAE test: 0.331; Epochs Since Improvement: 34\n",
      "   EPOCH 1664/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.184; MAE test: 0.322; Epochs Since Improvement: 36\n",
      "   EPOCH 1666/2000\n",
      "   Adjusted MAE: 0.385; MAE train: 0.174; MAE test: 0.331; Epochs Since Improvement: 38\n",
      "   EPOCH 1668/2000\n",
      "   Adjusted MAE: 0.362; MAE train: 0.355; MAE test: 0.434; Epochs Since Improvement: 40\n",
      "   EPOCH 1670/2000\n",
      "   Adjusted MAE: 0.364; MAE train: 0.191; MAE test: 0.339; Epochs Since Improvement: 42\n",
      "   EPOCH 1672/2000\n",
      "   Adjusted MAE: 0.369; MAE train: 0.174; MAE test: 0.322; Epochs Since Improvement: 44\n",
      "   EPOCH 1674/2000\n",
      "   Adjusted MAE: 0.335; MAE train: 0.195; MAE test: 0.325; Epochs Since Improvement: 46\n",
      "   EPOCH 1676/2000\n",
      "   Adjusted MAE: 0.359; MAE train: 0.187; MAE test: 0.331; Epochs Since Improvement: 48\n",
      "   EPOCH 1678/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.202; MAE test: 0.341; Epochs Since Improvement: 50\n",
      "   EPOCH 1680/2000\n",
      "   Adjusted MAE: 0.374; MAE train: 0.184; MAE test: 0.337; Epochs Since Improvement: 52\n",
      "   EPOCH 1682/2000\n",
      "   Adjusted MAE: 0.361; MAE train: 0.183; MAE test: 0.328; Epochs Since Improvement: 54\n",
      "   EPOCH 1684/2000\n",
      "   Adjusted MAE: 0.340; MAE train: 0.196; MAE test: 0.329; Epochs Since Improvement: 56\n",
      "   EPOCH 1686/2000\n",
      "   Adjusted MAE: 0.374; MAE train: 0.195; MAE test: 0.351; Epochs Since Improvement: 58\n",
      "   EPOCH 1688/2000\n",
      "   Adjusted MAE: 0.347; MAE train: 0.227; MAE test: 0.363; Epochs Since Improvement: 60\n",
      "   EPOCH 1690/2000\n",
      "   Adjusted MAE: 0.379; MAE train: 0.169; MAE test: 0.321; Epochs Since Improvement: 62\n",
      "   EPOCH 1692/2000\n",
      "   Adjusted MAE: 0.350; MAE train: 0.263; MAE test: 0.392; Epochs Since Improvement: 64\n",
      "   EPOCH 1694/2000\n",
      "   Adjusted MAE: 0.353; MAE train: 0.179; MAE test: 0.319; Epochs Since Improvement: 66\n",
      "   EPOCH 1696/2000\n",
      "   Adjusted MAE: 0.363; MAE train: 0.191; MAE test: 0.338; Epochs Since Improvement: 68\n",
      "   EPOCH 1698/2000\n",
      "   Adjusted MAE: 0.330; MAE train: 0.192; MAE test: 0.319; Epochs Since Improvement: 70\n",
      "   EPOCH 1700/2000\n",
      "   Adjusted MAE: 0.327; MAE train: 0.222; MAE test: 0.345; Epochs Since Improvement: 72\n",
      "   EPOCH 1702/2000\n",
      "   Adjusted MAE: 0.359; MAE train: 0.173; MAE test: 0.314; Epochs Since Improvement: 74\n",
      "   EPOCH 1704/2000\n",
      "   Adjusted MAE: 0.359; MAE train: 0.169; MAE test: 0.310; Epochs Since Improvement: 76\n",
      "   EPOCH 1706/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.181; MAE test: 0.322; Epochs Since Improvement: 78\n",
      "   EPOCH 1708/2000\n",
      "   Adjusted MAE: 0.328; MAE train: 0.215; MAE test: 0.339; Epochs Since Improvement: 80\n",
      "   EPOCH 1710/2000\n",
      "   Adjusted MAE: 0.348; MAE train: 0.184; MAE test: 0.321; Epochs Since Improvement: 82\n",
      "   EPOCH 1712/2000\n",
      "   Adjusted MAE: 0.317; MAE train: 0.239; MAE test: 0.349; Epochs Since Improvement: 84\n",
      "   EPOCH 1714/2000\n",
      "   Adjusted MAE: 0.322; MAE train: 0.300; MAE test: 0.382; Epochs Since Improvement: 86\n",
      "   EPOCH 1716/2000\n",
      "   Adjusted MAE: 0.346; MAE train: 0.181; MAE test: 0.317; Epochs Since Improvement: 88\n",
      "   EPOCH 1718/2000\n",
      "   Adjusted MAE: 0.378; MAE train: 0.180; MAE test: 0.335; Epochs Since Improvement: 90\n",
      "   EPOCH 1720/2000\n",
      "   Adjusted MAE: 0.349; MAE train: 0.198; MAE test: 0.337; Epochs Since Improvement: 92\n",
      "   EPOCH 1722/2000\n",
      "   Adjusted MAE: 0.346; MAE train: 0.197; MAE test: 0.334; Epochs Since Improvement: 94\n",
      "   EPOCH 1724/2000\n",
      "   Adjusted MAE: 0.359; MAE train: 0.177; MAE test: 0.320; Epochs Since Improvement: 96\n",
      "   EPOCH 1726/2000\n",
      "   Adjusted MAE: 0.363; MAE train: 0.186; MAE test: 0.333; Epochs Since Improvement: 98\n",
      "   EPOCH 1728/2000\n",
      "   Adjusted MAE: 0.372; MAE train: 0.175; MAE test: 0.325; Epochs Since Improvement: 100\n",
      "   EPOCH 1730/2000\n",
      "   Adjusted MAE: 0.362; MAE train: 0.196; MAE test: 0.344; Epochs Since Improvement: 102\n",
      "   EPOCH 1732/2000\n",
      "   Adjusted MAE: 0.360; MAE train: 0.210; MAE test: 0.358; Epochs Since Improvement: 104\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   EPOCH 1734/2000\n",
      "   Adjusted MAE: 0.374; MAE train: 0.179; MAE test: 0.331; Epochs Since Improvement: 106\n",
      "   EPOCH 1736/2000\n",
      "   Adjusted MAE: 0.346; MAE train: 0.200; MAE test: 0.337; Epochs Since Improvement: 108\n",
      "   EPOCH 1738/2000\n",
      "   Adjusted MAE: 0.342; MAE train: 0.187; MAE test: 0.321; Epochs Since Improvement: 110\n",
      "   EPOCH 1740/2000\n",
      "   Adjusted MAE: 0.340; MAE train: 0.234; MAE test: 0.364; Epochs Since Improvement: 112\n",
      "   EPOCH 1742/2000\n",
      "   Adjusted MAE: 0.342; MAE train: 0.202; MAE test: 0.337; Epochs Since Improvement: 114\n",
      "   EPOCH 1744/2000\n",
      "   Adjusted MAE: 0.357; MAE train: 0.189; MAE test: 0.332; Epochs Since Improvement: 116\n",
      "   EPOCH 1746/2000\n",
      "   Adjusted MAE: 0.321; MAE train: 0.285; MAE test: 0.376; Epochs Since Improvement: 118\n",
      "   EPOCH 1748/2000\n",
      "   Adjusted MAE: 0.363; MAE train: 0.172; MAE test: 0.316; Epochs Since Improvement: 120\n",
      "   EPOCH 1750/2000\n",
      "   Adjusted MAE: 0.347; MAE train: 0.228; MAE test: 0.365; Epochs Since Improvement: 122\n",
      "   EPOCH 1752/2000\n",
      "   Adjusted MAE: 0.344; MAE train: 0.224; MAE test: 0.358; Epochs Since Improvement: 124\n",
      "   EPOCH 1754/2000\n",
      "   Adjusted MAE: 0.316; MAE train: 0.268; MAE test: 0.365; Epochs Since Improvement: 126\n",
      "   EPOCH 1756/2000\n",
      "   Adjusted MAE: 0.355; MAE train: 0.207; MAE test: 0.351; Epochs Since Improvement: 128\n",
      "   EPOCH 1758/2000\n",
      "   Adjusted MAE: 0.350; MAE train: 0.193; MAE test: 0.332; Epochs Since Improvement: 130\n",
      "   EPOCH 1760/2000\n",
      "   Adjusted MAE: 0.316; MAE train: 0.266; MAE test: 0.364; Epochs Since Improvement: 132\n",
      "   EPOCH 1762/2000\n",
      "   Adjusted MAE: 0.352; MAE train: 0.257; MAE test: 0.390; Epochs Since Improvement: 134\n",
      "   EPOCH 1764/2000\n",
      "   Adjusted MAE: 0.341; MAE train: 0.220; MAE test: 0.353; Epochs Since Improvement: 136\n",
      "   EPOCH 1766/2000\n",
      "   Adjusted MAE: 0.331; MAE train: 0.216; MAE test: 0.341; Epochs Since Improvement: 138\n",
      "   EPOCH 1768/2000\n",
      "   Adjusted MAE: 0.369; MAE train: 0.179; MAE test: 0.328; Epochs Since Improvement: 140\n",
      "   EPOCH 1770/2000\n",
      "   Adjusted MAE: 0.352; MAE train: 0.240; MAE test: 0.378; Epochs Since Improvement: 142\n",
      "   EPOCH 1772/2000\n",
      "   Adjusted MAE: 0.380; MAE train: 0.170; MAE test: 0.323; Epochs Since Improvement: 144\n",
      "   EPOCH 1774/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.185; MAE test: 0.327; Epochs Since Improvement: 146\n",
      "   EPOCH 1776/2000\n",
      "   Adjusted MAE: 0.314; MAE train: 0.232; MAE test: 0.342; Epochs Since Improvement: 148\n",
      "   EPOCH 1778/2000\n",
      "   Adjusted MAE: 0.339; MAE train: 0.182; MAE test: 0.314; Epochs Since Improvement: 150\n",
      "   EPOCH 1780/2000\n",
      "   Adjusted MAE: 0.367; MAE train: 0.180; MAE test: 0.328; Epochs Since Improvement: 152\n",
      "   EPOCH 1782/2000\n",
      "   Adjusted MAE: 0.342; MAE train: 0.195; MAE test: 0.330; Epochs Since Improvement: 154\n",
      "   EPOCH 1784/2000\n",
      "   Adjusted MAE: 0.320; MAE train: 0.293; MAE test: 0.378; Epochs Since Improvement: 156\n",
      "   EPOCH 1786/2000\n",
      "   Adjusted MAE: 0.385; MAE train: 0.164; MAE test: 0.318; Epochs Since Improvement: 158\n",
      "   EPOCH 1788/2000\n",
      "   Adjusted MAE: 0.392; MAE train: 0.177; MAE test: 0.339; Epochs Since Improvement: 160\n",
      "   EPOCH 1790/2000\n",
      "   Adjusted MAE: 0.392; MAE train: 0.173; MAE test: 0.334; Epochs Since Improvement: 162\n",
      "   EPOCH 1792/2000\n",
      "   Adjusted MAE: 0.323; MAE train: 0.268; MAE test: 0.370; Epochs Since Improvement: 164\n",
      "   EPOCH 1794/2000\n",
      "   Adjusted MAE: 0.332; MAE train: 0.193; MAE test: 0.321; Epochs Since Improvement: 166\n",
      "   EPOCH 1796/2000\n",
      "   Adjusted MAE: 0.339; MAE train: 0.293; MAE test: 0.396; Epochs Since Improvement: 168\n",
      "   EPOCH 1798/2000\n",
      "   Adjusted MAE: 0.358; MAE train: 0.176; MAE test: 0.318; Epochs Since Improvement: 170\n",
      "   EPOCH 1800/2000\n",
      "   Adjusted MAE: 0.368; MAE train: 0.179; MAE test: 0.328; Epochs Since Improvement: 172\n",
      "   EPOCH 1802/2000\n",
      "   Adjusted MAE: 0.321; MAE train: 0.232; MAE test: 0.347; Epochs Since Improvement: 174\n",
      "   EPOCH 1804/2000\n",
      "   Adjusted MAE: 0.350; MAE train: 0.207; MAE test: 0.347; Epochs Since Improvement: 176\n",
      "   EPOCH 1806/2000\n",
      "   Adjusted MAE: 0.334; MAE train: 0.202; MAE test: 0.331; Epochs Since Improvement: 178\n",
      "   EPOCH 1808/2000\n",
      "   Adjusted MAE: 0.367; MAE train: 0.185; MAE test: 0.334; Epochs Since Improvement: 180\n",
      "   EPOCH 1810/2000\n",
      "   Adjusted MAE: 0.365; MAE train: 0.194; MAE test: 0.343; Epochs Since Improvement: 182\n",
      "   EPOCH 1812/2000\n",
      "   Adjusted MAE: 0.350; MAE train: 0.181; MAE test: 0.319; Epochs Since Improvement: 184\n",
      "   EPOCH 1814/2000\n",
      "   Adjusted MAE: 0.370; MAE train: 0.186; MAE test: 0.338; Epochs Since Improvement: 186\n",
      "   EPOCH 1816/2000\n",
      "   Adjusted MAE: 0.353; MAE train: 0.190; MAE test: 0.332; Epochs Since Improvement: 188\n",
      "   EPOCH 1818/2000\n",
      "   Adjusted MAE: 0.363; MAE train: 0.174; MAE test: 0.318; Epochs Since Improvement: 190\n",
      "   EPOCH 1820/2000\n",
      "   Adjusted MAE: 0.361; MAE train: 0.191; MAE test: 0.337; Epochs Since Improvement: 192\n",
      "   EPOCH 1822/2000\n",
      "   Adjusted MAE: 0.354; MAE train: 0.187; MAE test: 0.328; Epochs Since Improvement: 194\n",
      "   EPOCH 1824/2000\n",
      "   Adjusted MAE: 0.356; MAE train: 0.184; MAE test: 0.326; Epochs Since Improvement: 196\n",
      "   EPOCH 1826/2000\n",
      "   Adjusted MAE: 0.312; MAE train: 0.247; MAE test: 0.350; Epochs Since Improvement: 198\n",
      "   EPOCH 1828/2000\n",
      "   Adjusted MAE: 0.343; MAE train: 0.190; MAE test: 0.326; Epochs Since Improvement: 200\n"
     ]
    }
   ],
   "source": [
    "for epoch in range(epoch + 1, n_epochs):\n",
    "    model.train(True)\n",
    "    avg_loss = train_one_epoch(epoch, training_loader)\n",
    "\n",
    "    # Evaluate the model on the training and validation sets\n",
    "    mae_train = evaluate_model_training(training_loader, model, device)\n",
    "    mae_test = evaluate_model_training(val_loader, model, device)\n",
    "    \n",
    "    overfit_penalty_factor = 0.3  # Adjust this value as needed\n",
    "    relative_difference_threshold = 0.2  # Define a threshold for acceptable relative difference\n",
    "\n",
    "    # Calculate the relative difference between test and train MAE\n",
    "    relative_difference = (mae_test - mae_train) / mae_train\n",
    "\n",
    "    # Apply a penalty if the relative difference exceeds the threshold\n",
    "    if relative_difference > relative_difference_threshold:\n",
    "        overfit_penalty = (relative_difference - relative_difference_threshold) * overfit_penalty_factor\n",
    "    else:\n",
    "        overfit_penalty = 0\n",
    "\n",
    "    adjusted_mae = mae_train + overfit_penalty\n",
    "\n",
    "    # Track best performance, and save the model's state\n",
    "    if adjusted_mae < best_adjusted_mae:\n",
    "        best_adjusted_mae = adjusted_mae\n",
    "        best_testmae = mae_test\n",
    "        best_trainmae = mae_train\n",
    "        torch.save(model.state_dict(), 'best_model_3DGNN_10conf_6464_2000.pth')  # Save the model state\n",
    "        epochs_since_improvement = 0 \n",
    "    else:\n",
    "        epochs_since_improvement += 1\n",
    "\n",
    "    if epoch % 2 == 1:\n",
    "        print(f'   EPOCH {epoch + 1}/{n_epochs}')\n",
    "        print(f'   Adjusted MAE: {adjusted_mae:.3f}; MAE train: {mae_train:.3f}; MAE test: {mae_test:.3f}; Epochs Since Improvement: {epochs_since_improvement}')\n",
    "\n",
    "    if epochs_since_improvement >= early_stop_patience:\n",
    "        print(f\"No improvement in MAE for {early_stop_patience} epochs. Stopping training.\")\n",
    "        break\n",
    "        \n",
    "    with open(output_filename_training, \"a\") as file:\n",
    "        file.write(f\"EPOCH: {epoch}; Adjusted MAE: {adjusted_mae:.3f}; MAE Train: {mae_train:.3f}; MAE Test: {mae_test:.3f}; Best MAE Test: {best_testmae:.3f}; epochs_since_improvement: {epochs_since_improvement}\\n\")      \n",
    "    \n",
    "    torch.save({\n",
    "    'epoch': epoch,\n",
    "    'model_state_dict': model.state_dict(),\n",
    "    'optimizer_state_dict': optimizer.state_dict(),\n",
    "    'best_testmae': best_testmae,\n",
    "    'best_trainmae': best_trainmae,\n",
    "    'best_adjusted_mae': best_adjusted_mae,\n",
    "    'epochs_since_improvement': epochs_since_improvement,\n",
    "    }, 'checkpoint_6464_2000.pth')\n",
    "\n",
    "    torch.cuda.empty_cache()\n",
    "    \n",
    "print(f\"@Best MAE train: {best_testmae:.3f}\")        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "037358eb",
   "metadata": {},
   "source": [
    "# METRICS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dc72daaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8324cf99",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "from collections import defaultdict\n",
    "\n",
    "def evaluate_model(data_loader, model, device):\n",
    "    model.eval()\n",
    "    predictions = []\n",
    "    mol_ids = []\n",
    "    true_values = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in data_loader:\n",
    "            data = data.to(device)\n",
    "            outputs = model(data.x, data.pos, data.batch)\n",
    "            predictions.extend(outputs.cpu().numpy())\n",
    "            mol_ids.extend(data.mol_id.cpu().numpy())\n",
    "            true_values.extend(data.y.cpu().numpy())\n",
    "\n",
    "    # Aggregate predictions by averaging for each molecule ID\n",
    "    aggregated_predictions = aggregate_predictions(predictions, mol_ids)\n",
    "\n",
    "    # Calculate the total absolute error using aggregated predictions\n",
    "    total_abs_error = 0\n",
    "    aggregated_true_values = []\n",
    "    aggregated_predicted_values = []\n",
    "    for mol_id, true_value in zip(mol_ids, true_values):\n",
    "        total_abs_error += abs(aggregated_predictions[mol_id] - true_value)\n",
    "        aggregated_true_values.append(true_value)\n",
    "        aggregated_predicted_values.append(aggregated_predictions[mol_id])\n",
    "\n",
    "    # Calculate R2 score\n",
    "    r2 = r2_score(aggregated_true_values, aggregated_predicted_values)\n",
    "\n",
    "    return total_abs_error / len(true_values), r2    \n",
    "\n",
    "def aggregate_predictions(predictions, mol_ids):\n",
    "    aggregated_predictions = defaultdict(list)\n",
    "    # Collect predictions for each molecule ID\n",
    "    for mol_id, prediction in zip(mol_ids, predictions):\n",
    "        aggregated_predictions[mol_id].append(prediction)\n",
    "    \n",
    "    # Aggregate predictions by averaging\n",
    "    aggregated_predictions = {mol_id: sum(preds)/len(preds) for mol_id, preds in aggregated_predictions.items()}\n",
    "    return aggregated_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0eaac2cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE on Training Set: 0.223\n",
      "R2 Training Set: 0.98\n",
      "MAE on Validation Set: 0.329\n",
      "R2 Validation Set: 0.97\n"
     ]
    }
   ],
   "source": [
    "########################################################\n",
    "embedding_dim = 32\n",
    "num_rbf = 64\n",
    "cutoff = 5\n",
    "num_interactions = 5\n",
    "total_embedding_dim = (embedding_dim // 2) + (embedding_dim // 4) + (embedding_dim // 4) + 7\n",
    "#####\n",
    "training_data = [data for mol_id in train_mol_ids for data in conformers_by_mol_id[mol_id]]\n",
    "training_loader = GeoDataLoader(training_data, batch_size=batch_size, shuffle=True)\n",
    "########################################################\n",
    "model = SchNetModified(embedding_dim, num_rbf, cutoff, total_embedding_dim, num_interactions)\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "model.to(device)\n",
    "\n",
    "# Load the saved state dictionary\n",
    "model.load_state_dict(torch.load('best_model_3DGNN_10conf_CLEANED_2.pth'))\n",
    "\n",
    "# Set the model to evaluation mode\n",
    "model.eval()\n",
    "\n",
    "# Evaluate the model on the training and validation sets\n",
    "mae_train, r2_train = evaluate_model(training_loader, model, device)\n",
    "mae_test, r2_test = evaluate_model(test_loader, model, device)\n",
    "\n",
    "print(f'MAE on Training Set: {mae_train:.3f}')\n",
    "print(f'R2 Training Set: {r2_train:.2f}')\n",
    "print(f'MAE on Validation Set: {mae_test:.3f}')\n",
    "print(f'R2 Validation Set: {r2_test:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "607e2305",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_predictions(data_loader, model, device):\n",
    "    model.eval()\n",
    "    predictions = []\n",
    "    mol_ids = []\n",
    "    actuals = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in data_loader:\n",
    "            data = data.to(device)\n",
    "            outputs = model(data.x, data.pos, data.batch)\n",
    "            predictions.extend(outputs.cpu().numpy())\n",
    "            mol_ids.extend(data.mol_id.cpu().numpy())\n",
    "            actuals.extend(data.y.cpu().numpy())\n",
    "\n",
    "    # Aggregate predictions by averaging for each molecule ID\n",
    "    aggregated_predictions = aggregate_predictions(predictions, mol_ids)\n",
    "    aggregated_actuals = aggregate_predictions(actuals, mol_ids)\n",
    "    \n",
    "    return aggregated_actuals, aggregated_predictions\n",
    "\n",
    "def aggregate_predictions(predictions, mol_ids):\n",
    "    aggregated_predictions = defaultdict(list)\n",
    "    # Collect predictions for each molecule ID\n",
    "    for mol_id, prediction in zip(mol_ids, predictions):\n",
    "        aggregated_predictions[mol_id].append(prediction)\n",
    "    \n",
    "    # Aggregate predictions by averaging\n",
    "    aggregated_predictions = {mol_id: sum(preds)/len(preds) for mol_id, preds in aggregated_predictions.items()}\n",
    "    return aggregated_predictions\n",
    "\n",
    "train_actuals, train_predictions = make_predictions(training_loader, model, device)\n",
    "test_actuals, test_predictions = make_predictions(test_loader, model, device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "90be8e81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE on Training Set: 0.223\n",
      "R2 Training Set: 0.98\n",
      "MAE on Validation Set: 0.329\n",
      "R2 Validation Set: 0.97\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Extract actual and predicted values for plotting\n",
    "def extract_actuals_and_predictions(df, aggregated_predictions, true_values):\n",
    "    true_values = {int(row['ID'].split('_')[-1]): row['Steric'] for index, row in df.iterrows()}\n",
    "    actuals = [true_values[mol_id] for mol_id in aggregated_predictions.keys()]\n",
    "    predictions = list(aggregated_predictions.values())\n",
    "    return actuals, predictions\n",
    "\n",
    "# # Extracting actual and predicted values for each dataset\n",
    "train_actuals, train_predictions = extract_actuals_and_predictions(clean_df, train_predictions, train_actuals)\n",
    "test_actuals, test_predictions = extract_actuals_and_predictions(clean_df, test_predictions, test_actuals)\n",
    "\n",
    "# Assuming min_y and max_y are set to the desired range\n",
    "min_y = 50\n",
    "max_y = 80\n",
    "\n",
    "# Generate the ticks for both x and y axes\n",
    "ticks = np.arange(min_y, max_y + 1, 5)\n",
    "\n",
    "# Plot the predicted vs. actual values\n",
    "print(f'MAE on Training Set: {mae_train:.3f}')\n",
    "print(f'R2 Training Set: {r2_train:.2f}')\n",
    "print(f'MAE on Validation Set: {mae_test:.3f}')\n",
    "print(f'R2 Validation Set: {r2_test:.2f}')\n",
    "\n",
    "plt.figure(figsize=(3, 3))\n",
    "\n",
    "plt.scatter(train_actuals, train_predictions, marker='o', s=3, color='#FC766AFF', label='Train', alpha=0.5)\n",
    "plt.scatter(test_actuals, test_predictions, marker='o', s=3, color='#42C2A8', label='Test', alpha=0.5)\n",
    "plt.plot([min_y, max_y], [min_y, max_y], color='black', alpha=0.2, linestyle=':', label='Ideal Line')\n",
    "\n",
    "plt.xlabel(\"DFT Steric\")\n",
    "plt.ylabel(\"3D-MPNN Steric\")\n",
    "plt.yticks(ticks)\n",
    "plt.xticks(ticks)\n",
    "\n",
    "plt.legend(fontsize='small', frameon=False, handletextpad=0.5)\n",
    "# plt.legend(loc='upper left', fontsize='small', frameon=False, handletextpad=0.5)\n",
    "# plt.savefig('10conf_64x64_200.png', dpi=600, bbox_inches='tight')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a1fb122",
   "metadata": {},
   "source": [
    "# TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "972d9392",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE on Training Set: 0.258\n",
      "R2 Training Set: 0.99\n"
     ]
    }
   ],
   "source": [
    "dataframe = bromides_test.copy()\n",
    "\n",
    "# Generate a list of Data objects for all conformers across all molecules\n",
    "graph_data_list_test = []\n",
    "for _, row in dataframe.iterrows():\n",
    "    z = mol_to_graph_data(row['conf_1'])  # Use 'conf_1' to represent common node features\n",
    "    target = row['Steric']  # Use 'Steric' as the target property column\n",
    "    molecule_id = row['ID']  # Get molecule ID from the DataFrame\n",
    "    for i in range(1, 11):  # Loop through columns 'conf_1' to 'conf_10' for conformers\n",
    "        conformer = row.get(f'conf_{i}', None)\n",
    "        if conformer is not None:\n",
    "            graph_data = conformer_to_graph_data(conformer, z, target, molecule_id)\n",
    "            if graph_data is not None:\n",
    "                graph_data_list_test.append(graph_data)\n",
    "\n",
    "# graph_data_list now contains Data objects for all conformers, with molecule IDs included\n",
    "# display(graph_data_list_test)\n",
    "\n",
    "batch_size = 32\n",
    "test_final_loader = GeoDataLoader(graph_data_list_test, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "mae, r2 = evaluate_model(test_final_loader, model, device)\n",
    "\n",
    "print(f'MAE on Training Set: {mae:.3f}')\n",
    "print(f'R2 Training Set: {r2:.2f}')\n",
    "\n",
    "test_final_actuals, test_final_predictions = make_predictions(test_final_loader, model, device)\n",
    "\n",
    "test_final_actuals, test_final_predictions = extract_actuals_and_predictions(bromides_test, test_final_actuals, test_final_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9dd06a1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE on Training Set: 0.258\n",
      "R2 Training Set: 0.99\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "test_final_loader = GeoDataLoader(graph_data_list_test, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "mae, r2 = evaluate_model(test_final_loader, model, device)\n",
    "\n",
    "print(f'MAE on Training Set: {mae:.3f}')\n",
    "print(f'R2 Training Set: {r2:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7d093d2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE on Training Set: 0.258\n",
      "R2 Training Set: 0.99\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_final_actuals, test_final_predictions = make_predictions(test_final_loader, model, device)\n",
    "\n",
    "test_final_actuals, test_final_predictions = extract_actuals_and_predictions(bromides_test, test_final_actuals, test_final_predictions)\n",
    "\n",
    "# Assuming min_y and max_y are set to the desired range\n",
    "min_y = 50\n",
    "max_y = 80\n",
    "\n",
    "# Generate the ticks for both x and y axes\n",
    "ticks = np.arange(min_y, max_y + 1, 5)\n",
    "\n",
    "# Plot the predicted vs. actual values\n",
    "print(f'MAE on Training Set: {mae:.3f}')\n",
    "print(f'R2 Training Set: {r2:.2f}')\n",
    "\n",
    "plt.figure(figsize=(3, 3))\n",
    "\n",
    "plt.scatter(test_final_actuals, test_final_predictions, marker='o', s=3, color='#FC766AFF', label='Train', alpha=0.5)\n",
    "plt.plot([min_y, max_y], [min_y, max_y], color='black', alpha=0.2, linestyle=':', label='Ideal Line')\n",
    "\n",
    "plt.xlabel(\"DFT Steric\")\n",
    "plt.ylabel(\"3D-MPNN Steric\")\n",
    "plt.yticks(ticks)\n",
    "plt.xticks(ticks)\n",
    "\n",
    "plt.legend(fontsize='small', frameon=False, handletextpad=0.5)\n",
    "# plt.legend(loc='upper left', fontsize='small', frameon=False, handletextpad=0.5)\n",
    "# plt.savefig('10conf_64x64_200.png', dpi=600, bbox_inches='tight')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7b02949",
   "metadata": {},
   "source": [
    "# ANALYZE ERRORS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7a89e0cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>actual_value</th>\n",
       "      <th>predicted_value</th>\n",
       "      <th>absolute_error</th>\n",
       "      <th>smiles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>102</td>\n",
       "      <td>70.187286</td>\n",
       "      <td>71.134757</td>\n",
       "      <td>0.947471</td>\n",
       "      <td>Cc1cccc(C)c1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>388</td>\n",
       "      <td>63.452179</td>\n",
       "      <td>64.341093</td>\n",
       "      <td>0.888914</td>\n",
       "      <td>COc1ccccc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>57.009991</td>\n",
       "      <td>56.409010</td>\n",
       "      <td>0.600981</td>\n",
       "      <td>Brc1cscn1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>60.861210</td>\n",
       "      <td>61.452173</td>\n",
       "      <td>0.590963</td>\n",
       "      <td>Brc1cccc(Oc2ccccc2)c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14</td>\n",
       "      <td>65.485229</td>\n",
       "      <td>66.026298</td>\n",
       "      <td>0.541068</td>\n",
       "      <td>Cc1ccccc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>16</td>\n",
       "      <td>65.754288</td>\n",
       "      <td>66.246101</td>\n",
       "      <td>0.491813</td>\n",
       "      <td>CCc1ccccc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>13</td>\n",
       "      <td>65.465431</td>\n",
       "      <td>65.909566</td>\n",
       "      <td>0.444135</td>\n",
       "      <td>Cc1cc(F)ccc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>58.504940</td>\n",
       "      <td>58.915554</td>\n",
       "      <td>0.410614</td>\n",
       "      <td>COc1cccc(Br)n1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>21</td>\n",
       "      <td>58.202110</td>\n",
       "      <td>57.803431</td>\n",
       "      <td>0.398680</td>\n",
       "      <td>Brc1ccccn1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>62.070789</td>\n",
       "      <td>61.681874</td>\n",
       "      <td>0.388916</td>\n",
       "      <td>CC(C)(C)c1cc(Br)cc(C(C)(C)C)c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>17</td>\n",
       "      <td>65.754288</td>\n",
       "      <td>66.124495</td>\n",
       "      <td>0.370207</td>\n",
       "      <td>CCc1ccccc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>124</td>\n",
       "      <td>65.566177</td>\n",
       "      <td>65.906177</td>\n",
       "      <td>0.339999</td>\n",
       "      <td>Cc1ccc(F)cc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>19</td>\n",
       "      <td>65.690811</td>\n",
       "      <td>65.962273</td>\n",
       "      <td>0.271461</td>\n",
       "      <td>Cc1ccc(C)c(Br)c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>15</td>\n",
       "      <td>69.413902</td>\n",
       "      <td>69.181196</td>\n",
       "      <td>0.232706</td>\n",
       "      <td>Cc1ccc2ccccc2c1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2</td>\n",
       "      <td>64.538879</td>\n",
       "      <td>64.749565</td>\n",
       "      <td>0.210686</td>\n",
       "      <td>Brc1cccc2ncccc12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>84</td>\n",
       "      <td>62.622299</td>\n",
       "      <td>62.829545</td>\n",
       "      <td>0.207246</td>\n",
       "      <td>Fc1ccccc1Br</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>60.836750</td>\n",
       "      <td>61.018142</td>\n",
       "      <td>0.181392</td>\n",
       "      <td>COc1cccc(Br)c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>11</td>\n",
       "      <td>60.635250</td>\n",
       "      <td>60.469478</td>\n",
       "      <td>0.165772</td>\n",
       "      <td>CCc1ccc(Br)cc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>5</td>\n",
       "      <td>60.792488</td>\n",
       "      <td>60.957871</td>\n",
       "      <td>0.165383</td>\n",
       "      <td>COc1ccc(Br)cc1OC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>10</td>\n",
       "      <td>60.635250</td>\n",
       "      <td>60.475106</td>\n",
       "      <td>0.160144</td>\n",
       "      <td>CCc1ccc(Br)cc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>60.652142</td>\n",
       "      <td>60.530018</td>\n",
       "      <td>0.122123</td>\n",
       "      <td>Cc1ccc(-c2ccc(Br)cc2)cc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20</td>\n",
       "      <td>60.698730</td>\n",
       "      <td>60.589374</td>\n",
       "      <td>0.109356</td>\n",
       "      <td>N#Cc1ccc(Br)cc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4</td>\n",
       "      <td>63.409660</td>\n",
       "      <td>63.516215</td>\n",
       "      <td>0.106554</td>\n",
       "      <td>Brc1cccc2cccnc12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3</td>\n",
       "      <td>60.668442</td>\n",
       "      <td>60.565152</td>\n",
       "      <td>0.103289</td>\n",
       "      <td>COc1ccc(Br)cc1F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18</td>\n",
       "      <td>62.691021</td>\n",
       "      <td>62.790582</td>\n",
       "      <td>0.099561</td>\n",
       "      <td>Fc1ccc(F)c(Br)c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8</td>\n",
       "      <td>58.333721</td>\n",
       "      <td>58.234446</td>\n",
       "      <td>0.099275</td>\n",
       "      <td>Fc1cccc(Br)n1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>28</td>\n",
       "      <td>60.798901</td>\n",
       "      <td>60.719153</td>\n",
       "      <td>0.079748</td>\n",
       "      <td>N#Cc1ccc(Br)cc1F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>37</td>\n",
       "      <td>60.878681</td>\n",
       "      <td>60.813206</td>\n",
       "      <td>0.065475</td>\n",
       "      <td>CCCCOc1ccc2cc(Br)ccc2c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>24</td>\n",
       "      <td>64.657097</td>\n",
       "      <td>64.713258</td>\n",
       "      <td>0.056161</td>\n",
       "      <td>Brc1cccc2ccccc12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>60.731339</td>\n",
       "      <td>60.785720</td>\n",
       "      <td>0.054381</td>\n",
       "      <td>O=C(c1ccccc1)c1ccc(Br)cc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>38</td>\n",
       "      <td>60.880428</td>\n",
       "      <td>60.922823</td>\n",
       "      <td>0.042395</td>\n",
       "      <td>Brc1ccc2c(c1)Cc1ccccc1-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>25</td>\n",
       "      <td>60.659710</td>\n",
       "      <td>60.633054</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>Fc1ccc(Br)cc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>7</td>\n",
       "      <td>60.791908</td>\n",
       "      <td>60.813904</td>\n",
       "      <td>0.021996</td>\n",
       "      <td>Fc1cccc(Br)c1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>355</td>\n",
       "      <td>65.773499</td>\n",
       "      <td>65.755154</td>\n",
       "      <td>0.018345</td>\n",
       "      <td>Cc1cccc(Br)c1C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>322</td>\n",
       "      <td>65.415352</td>\n",
       "      <td>65.415051</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>COc1ccc(Br)c(C)c1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ID  actual_value  predicted_value  absolute_error  \\\n",
       "26  102     70.187286        71.134757        0.947471   \n",
       "24  388     63.452179        64.341093        0.888914   \n",
       "1     1     57.009991        56.409010        0.600981   \n",
       "12   12     60.861210        61.452173        0.590963   \n",
       "4    14     65.485229        66.026298        0.541068   \n",
       "20   16     65.754288        66.246101        0.491813   \n",
       "18   13     65.465431        65.909566        0.444135   \n",
       "0     9     58.504940        58.915554        0.410614   \n",
       "5    21     58.202110        57.803431        0.398680   \n",
       "31   31     62.070789        61.681874        0.388916   \n",
       "21   17     65.754288        66.124495        0.370207   \n",
       "28  124     65.566177        65.906177        0.339999   \n",
       "22   19     65.690811        65.962273        0.271461   \n",
       "19   15     69.413902        69.181196        0.232706   \n",
       "17    2     64.538879        64.749565        0.210686   \n",
       "23   84     62.622299        62.829545        0.207246   \n",
       "7     6     60.836750        61.018142        0.181392   \n",
       "14   11     60.635250        60.469478        0.165772   \n",
       "16    5     60.792488        60.957871        0.165383   \n",
       "13   10     60.635250        60.475106        0.160144   \n",
       "32   33     60.652142        60.530018        0.122123   \n",
       "3    20     60.698730        60.589374        0.109356   \n",
       "9     4     63.409660        63.516215        0.106554   \n",
       "10    3     60.668442        60.565152        0.103289   \n",
       "8    18     62.691021        62.790582        0.099561   \n",
       "15    8     58.333721        58.234446        0.099275   \n",
       "29   28     60.798901        60.719153        0.079748   \n",
       "33   37     60.878681        60.813206        0.065475   \n",
       "2    24     64.657097        64.713258        0.056161   \n",
       "30   30     60.731339        60.785720        0.054381   \n",
       "34   38     60.880428        60.922823        0.042395   \n",
       "6    25     60.659710        60.633054        0.026656   \n",
       "11    7     60.791908        60.813904        0.021996   \n",
       "27  355     65.773499        65.755154        0.018345   \n",
       "25  322     65.415352        65.415051        0.000301   \n",
       "\n",
       "                            smiles  \n",
       "26                  Cc1cccc(C)c1Br  \n",
       "24                    COc1ccccc1Br  \n",
       "1                        Brc1cscn1  \n",
       "12           Brc1cccc(Oc2ccccc2)c1  \n",
       "4                      Cc1ccccc1Br  \n",
       "20                    CCc1ccccc1Br  \n",
       "18                  Cc1cc(F)ccc1Br  \n",
       "0                   COc1cccc(Br)n1  \n",
       "5                       Brc1ccccn1  \n",
       "31  CC(C)(C)c1cc(Br)cc(C(C)(C)C)c1  \n",
       "21                    CCc1ccccc1Br  \n",
       "28                  Cc1ccc(F)cc1Br  \n",
       "22                Cc1ccc(C)c(Br)c1  \n",
       "19               Cc1ccc2ccccc2c1Br  \n",
       "17                Brc1cccc2ncccc12  \n",
       "23                     Fc1ccccc1Br  \n",
       "7                   COc1cccc(Br)c1  \n",
       "14                  CCc1ccc(Br)cc1  \n",
       "16                COc1ccc(Br)cc1OC  \n",
       "13                  CCc1ccc(Br)cc1  \n",
       "32        Cc1ccc(-c2ccc(Br)cc2)cc1  \n",
       "3                  N#Cc1ccc(Br)cc1  \n",
       "9                 Brc1cccc2cccnc12  \n",
       "10                 COc1ccc(Br)cc1F  \n",
       "8                 Fc1ccc(F)c(Br)c1  \n",
       "15                   Fc1cccc(Br)n1  \n",
       "29                N#Cc1ccc(Br)cc1F  \n",
       "33         CCCCOc1ccc2cc(Br)ccc2c1  \n",
       "2                 Brc1cccc2ccccc12  \n",
       "30       O=C(c1ccccc1)c1ccc(Br)cc1  \n",
       "34        Brc1ccc2c(c1)Cc1ccccc1-2  \n",
       "6                    Fc1ccc(Br)cc1  \n",
       "11                   Fc1cccc(Br)c1  \n",
       "27                  Cc1cccc(Br)c1C  \n",
       "25               COc1ccc(Br)c(C)c1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_final_actuals, test_final_predictions = make_predictions(test_final_loader, model, device)\n",
    "\n",
    "def abs_errors_df(actuals, predictions, dataframe):\n",
    "    # Compute absolute errors and prepare data for DataFrame\n",
    "    data = []\n",
    "    for mol_id in actuals.keys():\n",
    "        actual_value = actuals[mol_id]\n",
    "        predicted_value = predictions.get(mol_id, None)\n",
    "        if predicted_value is not None:\n",
    "            absolute_error = abs(actual_value - predicted_value)\n",
    "            data.append({'ID': mol_id, 'actual_value': actual_value, 'predicted_value': predicted_value, 'absolute_error': absolute_error})\n",
    "\n",
    "    # Create a DataFrame\n",
    "    df = pd.DataFrame(data)\n",
    "\n",
    "    # Sort by absolute_error in descending order\n",
    "    df = df.sort_values(by='absolute_error', ascending=False)\n",
    "\n",
    "    # Create a mapping from mol_id to smiles in dataframe\n",
    "    smiles_mapping = {int(row['ID'].split('_')[-1]): row['smiles'] for _, row in dataframe.iterrows()}\n",
    "\n",
    "    # Add the smiles column to df using the mapping\n",
    "    df['smiles'] = df['ID'].map(smiles_mapping)\n",
    "\n",
    "    return df\n",
    "\n",
    "errors_df = abs_errors_df(test_final_actuals, test_final_predictions, bromides_test)\n",
    "display(errors_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "cba86676",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rdkit import Chem\n",
    "from rdkit.Chem import Draw\n",
    "import pandas as pd\n",
    "from IPython.display import display\n",
    "\n",
    "def generate_molecule_grid_image(df, column_smiles='smiles', column_id='mold_id', column_error='absolute_error', num_molecules=10, mols_per_row=5, img_size=(300, 300), export_png=False, file_name='molecule_grid.png'):\n",
    "    \"\"\"\n",
    "    Generate a grid image of molecules with high absolute error, displaying the molecule, ID, and error.\n",
    "    \n",
    "    Parameters:\n",
    "    - df: DataFrame containing molecules' SMILES strings, IDs, and absolute errors.\n",
    "    - column_smiles: Name of the column containing SMILES strings.\n",
    "    - column_id: Name of the column containing molecule IDs.\n",
    "    - column_error: Name of the column containing absolute errors for each molecule.\n",
    "    - num_molecules: Number of molecules to include in the grid image.\n",
    "    - mols_per_row: Number of molecules per row in the grid.\n",
    "    - img_size: Size of each molecule image in the grid (width, height).\n",
    "    - export_png: Boolean, whether to export the image as a PNG file.\n",
    "    - file_name: The name of the file to save the image to, if export_png is True.\n",
    "    \n",
    "    Returns:\n",
    "    - If export_png is False, an IPython display object containing the grid image.\n",
    "    - If export_png is True, saves the image to the specified file_name.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Limit the DataFrame to the first 'num_molecules' rows\n",
    "    limited_df = df.iloc[:num_molecules]\n",
    "\n",
    "    # Generate RDKit molecule objects from the SMILES strings\n",
    "    mols = [Chem.MolFromSmiles(smiles) for smiles in limited_df[column_smiles] if pd.notnull(smiles)]\n",
    "    \n",
    "    # Prepare legends using molecule ID and absolute error\n",
    "    legends = [f\"{row[column_id]}: Error={row[column_error]:.2f}\" for index, row in limited_df.iterrows()]\n",
    "\n",
    "    img = Draw.MolsToGridImage(\n",
    "        mols,\n",
    "        molsPerRow=mols_per_row,\n",
    "        subImgSize=img_size,\n",
    "        legends=legends  # Use molecule ID and absolute error as legends\n",
    "    )\n",
    "\n",
    "    if export_png:\n",
    "        png = img.data\n",
    "        with open(file_name,'wb+') as outf:\n",
    "            outf.write(png)\n",
    "        print(f\"Image saved as {file_name}\")\n",
    "    else:\n",
    "        display(img)  # Directly display the image in Jupyter Notebook or JupyterLab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "e46d733e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# sorted_df = errors_df.sort_values(by='Absolute Error', ascending=False)\n",
    "\n",
    "# generate_molecule_grid_image(sorted_df, \n",
    "#                              column_smiles='smiles', \n",
    "#                              column_id='ID', \n",
    "#                              column_error='Absolute Error', \n",
    "#                              num_molecules=50, \n",
    "#                              mols_per_row=5, \n",
    "#                              img_size=(300, 300), \n",
    "#                              export_png=True, \n",
    "#                              file_name='molecule_grid_new.png')\n",
    "\n",
    "generate_molecule_grid_image(errors_df, \n",
    "                             column_smiles='smiles', \n",
    "                             column_id='ID', \n",
    "                             column_error='absolute_error', \n",
    "                             num_molecules=20, \n",
    "                             mols_per_row=5, \n",
    "                             img_size=(300, 300), \n",
    "                             export_png=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d52d2e5e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ggn_3",
   "language": "python",
   "name": "gnn_3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
